[{"title":"2022-8-21 blog更新日志","url":"/2022/08/21/2022-08-21-blogupdate/","content":"更新日志\nupdate hexo-theme-next 7.8.0 → 8.12.3\nadd hexo-next-twikoo\n\nhexo-tag-mmedia test var AezeuEboPSzVrUGa_options = JSON.parse('{\\\"style\\\":\\\"width:100%;height:650px;max-width:1200px;center\\\",\\\"url\\\":\\\"https://dlink.host/sharepoint/aHR0cHM6Ly9zYWludDEzMzctbXkuc2hhcmVwb2ludC5jb20vOnY6L2cvcGVyc29uYWwvZHV6aHVvX3NhaW50MTMzN19vbm1pY3Jvc29mdF9jb20vRWFpY2hQZ21JaEZIaEVLRVpFdUN3OVlCTnpxVV9xUnkxYm1GR2prR20yZDVnUT9lPWJRbkR4bA.mp4\\\",\\\"autoSize\\\":true,\\\"autoMini\\\":false,\\\"fullscreen\\\":true,\\\"fullscreenWeb\\\":true}'); AezeuEboPSzVrUGa_options.container = \"#mmedia-AezeuEboPSzVrUGa\"; HEXO_MMEDIA_DATA.js.push(\"https://cdn.jsdelivr.net/npm/artplayer/dist/artplayer.js\");HEXO_MMEDIA_DATA.artPlayerData.push(AezeuEboPSzVrUGa_options); \n\n var xjvVBCwUhWSVmeCd_options = JSON.parse('{\\\"audio\\\":[{\\\"name\\\":\\\"Sweety - 樱花草\\\",\\\"url\\\":\\\"https://dlink.host/sharepoint/aHR0cHM6Ly9zYWludDEzMzctbXkuc2hhcmVwb2ludC5jb20vOnU6L2cvcGVyc29uYWwvZHV6aHVvX3NhaW50MTMzN19vbm1pY3Jvc29mdF9jb20vRWNCZGxoUDdxQVJIaVBzY2NvSXFndm9CYURseDZhWVlYNUpsZHc0b1FlckhVZz9lPTJrSmhmcQ.mp3\\\"}]}');\n    xjvVBCwUhWSVmeCd_options.container = document.getElementById(\"mmedia-xjvVBCwUhWSVmeCd\");HEXO_MMEDIA_DATA.css.push(\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.css\");HEXO_MMEDIA_DATA.js.push(\"https://cdn.jsdelivr.net/npm/aplayer@1/dist/APlayer.min.js\");HEXO_MMEDIA_DATA.aplayerData.push(xjvVBCwUhWSVmeCd_options); \n\n\n涩图赠送\n","tags":["update","hexo","test"]},{"title":"AI笑话之猴子有枪","url":"/2025/03/01/AI%E7%AC%91%E8%AF%9D%E4%B9%8B%E7%8C%B4%E5%AD%90%E6%9C%89%E6%9E%AA/","content":"\n\n"},{"title":"在OpenWRT上使用AdGuard Home的DNS服务代替dnsmasq","url":"/2024/02/02/AdGuardHome-in-OpenWRT/","content":"当前环境\nStep1 从仓库下载二进制文件并解压cd &#x2F;usr&#x2F;bin\n## 没有curl可以使用opkg安装或者用wget替代\ncurl -O https:&#x2F;&#x2F;github.com&#x2F;AdguardTeam&#x2F;AdGuardHome&#x2F;releases&#x2F;download&#x2F;v0.107.42&#x2F;AdGuardHome_linux_arm64.tar.gz\ntar -zxvf .&#x2F;AdGuardHome_linux_arm64.tar.gz\nrm -rf .&#x2F;AdGuardHome_linux_arm64.tar.gz\ncd .&#x2F;AdGuardHome\n\nStep2 启动AdGuardHome并进入后台.&#x2F;AdGuardHome\n\n出现类似下面的提示就代表AdGuardHome已经启动\n\n这样大概就是成功了，现在我们的AdGuardHome还不能开机运行，需要配置守护进程。\nStep3 配置开机启动cd &#x2F;usr&#x2F;bin&#x2F;AdGuardHome\n.&#x2F;AdGuardHome -s install\n\n这样procd脚本就会被写入到&#x2F;etc&#x2F;init.d文件夹里面 \nroot@OpenWrt:&#x2F;usr&#x2F;bin&#x2F;AdGuardHome# cat &#x2F;etc&#x2F;init.d&#x2F;AdGuardHome \n#!&#x2F;bin&#x2F;sh &#x2F;etc&#x2F;rc.common\n\nUSE_PROCD&#x3D;1\n\nSTART&#x3D;95\nSTOP&#x3D;01\n\ncmd&#x3D;&quot;&#x2F;usr&#x2F;bin&#x2F;AdGuardHome&#x2F;AdGuardHome &quot;-s&quot; &quot;run&quot;&quot;\nname&#x3D;&quot;AdGuardHome&quot;\npid_file&#x3D;&quot;&#x2F;var&#x2F;run&#x2F;$&#123;name&#125;.pid&quot;\n\nstart_service() &#123;\n    echo &quot;Starting $&#123;name&#125;&quot;\n\n    procd_open_instance\n    procd_set_param command $&#123;cmd&#125;\n    procd_set_param respawn             # respawn automatically if something died\n    procd_set_param stdout 1            # forward stdout of the command to logd\n    procd_set_param stderr 1            # same for stderr\n    procd_set_param pidfile $&#123;pid_file&#125; # write a pid file on instance start and remove it on stop\n\n    procd_close_instance\n    echo &quot;$&#123;name&#125; has been started&quot;\n&#125;\n\nstop_service() &#123;\n    echo &quot;Stopping $&#123;name&#125;&quot;\n&#125;\n\nEXTRA_COMMANDS&#x3D;&quot;status&quot;\nEXTRA_HELP&#x3D;&quot;        status  Print the service status&quot;\n\nget_pid() &#123;\n    cat &quot;$&#123;pid_file&#125;&quot;\n&#125;\n\nis_running() &#123;\n    [ -f &quot;$&#123;pid_file&#125;&quot; ] &amp;&amp; ps | grep -v grep | grep $(get_pid) &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1\n&#125;\n\nstatus() &#123;\n    if is_running; then\n        echo &quot;Running&quot;\n    else\n        echo &quot;Stopped&quot;\n        exit 1\n    fi\n&#125;\nroot@OpenWrt:&#x2F;usr&#x2F;bin&#x2F;AdGuardHome# \n\nStep4 修改53端口的服务由AdGuardHome提供在 /etc/config/dhcp中找到option port &#39;53&#39; 并将53改为0\nservice dnsmasq restart\n## 这样我们就关闭了dnsmasq提供的dns服务\n\n\n现在我们修改AdGuardHome提供dns服务的端口\n打开 &#x2F;usr&#x2F;bin&#x2F;AdGuardHome&#x2F;AdGuardHome.yaml （我们之前解压二进制文件的目录） 并替换端口为53\nservice AdGuardHome restart\n## 重新启动后查看端口情况\nnetstat -tunlp | grep 53\n\n\n\n\n附https://dns.icoa.cn/ 可用的上游dns列表\n"},{"title":"CVE-2024-6387漏洞Debian修复","url":"/2024/07/04/CVE-2024-6387%E6%BC%8F%E6%B4%9EDebian%E4%BF%AE%E5%A4%8D/","content":"喜报 openssh远程代码执行漏洞CVE-2024-6387 Debian发行版已经全部修补\n注意： 有些使用DD重装脚本安装的Debian bookworm 没有开启 bookworm-security源，需要手动开启。\n\n[2024-07-03] openssh 1:9.7p1-7 MIGRATED to testing (Debian testing watch)\n[2024-07-01] Accepted openssh 1:9.2p1-2+deb12u3 (source) into proposed-updates (Debian FTP Masters) (signed by: Salvatore Bonaccorso)\n[2024-07-01] Accepted openssh 1:9.7p1-7 (source) into unstable (Colin Watson)\n[2024-07-01] Accepted openssh 1:9.2p1-2+deb12u3 (source) into stable-security (Debian FTP Masters) (signed by: Salvatore Bonaccorso)\n\n"},{"title":"ClashX Pro + UnblockNeteaseMusic","url":"/2023/02/22/ClashX+UnblockNeteaseMusic/","content":"准备\nUnblockNeteaseMusic&#x2F;server\n\nClashX Pro\n\n网易云音乐 2.3.12_956\n\n安装证书 ca.crt\n\n\nClashX Pro 设置并添加规则\n开启 Enhanced mode\n\nEnhanced mode Config → DNS mode → Mapping\n\n\n编辑 config.yaml\nproxies:\n  - &#123; name: NeteaseMusicUnlock, type: http, server: 192.168.1.2, port: 8080 &#125;\n\nproxy-groups:\n  - name: NeteaseMusic\ntype: select\nproxies:\n  - DIRECT\n  - NeteaseMusicUnlock\n\nrules:\n  - DOMAIN-SUFFIX,music.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,music.126.net,NeteaseMusic\n  - DOMAIN-SUFFIX,163yun.com,NeteaseMusic\n  - DOMAIN-SUFFIX,api.iplay.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,apm.music.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,apm3.music.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,interface.music.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,interface3.music.163.com,NeteaseMusic\n  - DOMAIN-SUFFIX,mam.netease.com,NeteaseMusic\n  - DOMAIN-SUFFIX,hz.netease.com,NeteaseMusic\n  - IP-CIDR,39.105.63.80&#x2F;32,NeteaseMusic\n  - IP-CIDR,45.254.48.1&#x2F;32,NeteaseMusic\n  - IP-CIDR,47.100.127.239&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.21.14&#x2F;31,NeteaseMusic\n  - IP-CIDR,59.111.179.214&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.181.38&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.181.60&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.160.195&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.160.197&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.181.35&#x2F;32,NeteaseMusic\n  - IP-CIDR,59.111.238.29&#x2F;32,NeteaseMusic\n  - IP-CIDR,101.71.154.241&#x2F;32,NeteaseMusic\n  - IP-CIDR,103.126.92.132&#x2F;32,NeteaseMusic\n  - IP-CIDR,103.126.92.133&#x2F;32,NeteaseMusic\n  - IP-CIDR,112.13.119.17&#x2F;32,NeteaseMusic\n  - IP-CIDR,112.13.122.1&#x2F;32,NeteaseMusic\n  - IP-CIDR,115.236.118.33&#x2F;32,NeteaseMusic\n  - IP-CIDR,115.236.121.1&#x2F;32,NeteaseMusic\n  - IP-CIDR,118.24.63.156&#x2F;32,NeteaseMusic\n  - IP-CIDR,193.112.159.225&#x2F;32,NeteaseMusic\n  - IP-CIDR,223.252.199.66&#x2F;32,NeteaseMusic\n  - IP-CIDR,223.252.199.67&#x2F;32,NeteaseMusic\n\nReload Config And Enjoy !\n"},{"title":"Cookie 笑话一则","url":"/2025/07/19/Cookie-%E7%AC%91%E8%AF%9D%E4%B8%80%E5%88%99/","content":"\n\n"},{"title":"GNU/Linux 使用 CLi 连接无线网","url":"/2023/10/30/Debian-wifi/","content":"查看当前无线网卡并启用sudo iwconfig 查看得到我当前的无线网卡名称是 wlan0\n\nsudo ifconfig wlan0 up 启用无线网卡\n\n扫描可用网络sudo iwlist wlan0 scan 查找当前可用网络 结果过多的情况下使用  grep 找出 SSID\n\n使用 wpa_supplicant 连接网络sudo wpa_passphrase &#123;SSID&#125; &#123;PASSWD&#125; &gt; sudo /etc/wpa_supplicant/&#123;SSID&#125;.conf\n其中 /etc/wpa_supplicant/ 是默认存放配置文件的目录\n\n sudo wpa_supplicant -i wlan0 -c /etc/wpa_supplicant/&#123;SSID&#125;.conf -B 使用我们刚才保存的配置文件和 wlan0 网卡连接网络\n\n到这一步我们还不能上网 需要使用 sudo dhclient wlan0 获取到 ip 之后才能上网\n"},{"title":"MongoDB中实现查询结果分页","url":"/2024/11/25/MongoDB%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E5%88%86%E9%A1%B5/","content":"分页？\n显著提高查询速度，每次只处理一小部分数据减少了数据库的负担。\n简化数据展示，能让用户方便地浏览和查找所需信息。\n\n用户界面展示使用 HTTP GET 方法来获取分页的数据，其中page为数据页索引size为数据页大小：\n/products?page=&#123;page&#125;&amp;size=&#123;size&#125;\n以表 products 为例\n其中返回的数据的应该包含：全部商品数量，总页数，当前是第几页，当前页的全部产品数据。\n服务端与数据库交互逻辑代码片段以 express + MongoDB 为例：\n\n服务端提取出 query 中的page和size\n\nconst page &#x3D; Number(req.query.page) || 1;\nconst size &#x3D; Number(req.query.size) || 10;\n\n\n进行数据库查询，提取 collection 中的当前页数据\n根据 db.collection.find() 中的 limit 和 skip 选项来进行查询。\nconst skip &#x3D; (page - 1) *size;\n\n&#x2F;&#x2F; 当前页的产品数据\nconst products &#x3D; await collection.find()\n  .skip(skip)\n  .limit(size)\n  .toArray();\n\n查询 collection 中的数据总条数\ndb.collection.estimatedDocumentCount() 不采用查询过滤，而是使用元数据返回集合的计数。\ndb.collection.countDocuments() 返回一个整数，代表与该集合或视图的查询匹配的文档数量。此方法可用于事务。\nconst totalCount &#x3D; await collection.estimatedDocumentCount(); \n&#x2F;&#x2F;返回快 无法过滤\n\n  const totalCount &#x3D; await collection.countDocuments(&#123; deleted: &#123; $ne: true &#125; &#125;);\n&#x2F;&#x2F; 过滤掉所有 deleted: true 的 document\n\n根据总条数和每页大小计算总页数\nconst totalPages &#x3D; Math.ceil(totalCount &#x2F; size);\n\n返回数据（以json为例）：\nres.json(&#123;\n  totalCount,\n  totalPages,\n  currentPage: page,\n  products\n&#125;);\n\n"},{"title":"MyLaptop","url":"/2023/08/12/MyLaptop/","content":"镜像与电脑型号安装镜像 : debian-12.1.0-amd64-DVD-1.iso\n目前更新为 testing\n笔记本 : acer SF314-512-52TY\nhw-probe : link\n\n问题\n摄像头不工作\n指纹不工作\n无法查看风扇转速 ( Windows下一样 )\n\n"},{"title":"Python3.14新特性Template Strings(t-string)使用示例","url":"/2025/05/11/Python3-14%E6%96%B0%E7%89%B9%E6%80%A7Template-Strings-t-string%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/","content":"Python中可能已经有很多类似模板字符串的东西，但都和 PEP 750 中的 string.templatelib 不一样\n比如：string.Template 、string.Formatter&#x2F;str.format() 、 f-string 和%这种上古写法。\n在 PEP 750中提到的Motivation中指出f-string的语法虽然方便，但经常会因为操作者处理SQL语句或者HTML文档时直接拼接导致出现安全漏洞。（实话说这里确实挺抽象的。f-string没有任何问题，问题出在程序员没有对输入的内容进行预处理而直接拼接。）\n&gt;&gt;&gt; name &#x3D; &#39;duzhuo&#39;\n&gt;&gt;&gt; template &#x3D; t&#39;Hello,&#123;name&#125;&#39;\n&gt;&gt;&gt; template\nTemplate(strings&#x3D;(&#39;Hello,&#39;, &#39;&#39;), interpolations&#x3D;(Interpolation(&#39;duzhuo&#39;, &#39;name&#39;, None, &#39;&#39;),))\n\n\nSQL参数化查询from string.templatelib import Template, Interpolation\nimport sqlite3\n\n\ndef run_query(db, template: Template):\n    parts &#x3D; []\n    params &#x3D; []\n    for i in template:\n        if type(i) is str:\n            parts.append(i)\n        if type(i) is Interpolation:\n            parts.append(&quot;?&quot;)\n            # i.value是一个tuple\n            params.append(i.value)\n        query_string &#x3D; &quot;&quot;.join(parts)\n    print(query_string)\n    #    SELECT * FROM products\n    #    WHERE is_available &#x3D; ? AND category &#x3D; ?\n    return db.execute(&quot;&quot;.join(parts), params)\n\n\ndef main():\n    db &#x3D; sqlite3.connect(&quot;.&#x2F;test.db&quot;)\n    is_available &#x3D; 1\n    category &#x3D; &quot;Home&quot;\n    template &#x3D; t&quot;&quot;&quot;\n    SELECT * FROM products\n    WHERE is_available &#x3D; &#123;is_available&#125; AND category &#x3D; &#123;category&#125;\n    &quot;&quot;&quot;\n    print(list(run_query(db, template)))\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    main()\n\nHTML转义from html import escape\nfrom string.templatelib import Template, Interpolation\n\n\ndef safe_html(template: Template) -&gt; str:\n    parts &#x3D; []\n    for i in template:\n        if type(i) is str:\n            parts.append(i)\n        if type(i) is Interpolation:\n            parts.append(escape(i.value))\n    return &quot;&quot;.join(parts)\n\n\ndef main():\n    user_input1 &#x3D; &quot;duzhuo&quot;\n    user_input2 &#x3D; &#39;&lt;script&gt;alert(&quot;XSS Attacking&quot;)&lt;&#x2F;script&gt;&#39;\n    html_template &#x3D; t&quot;&quot;&quot;\n    &lt;div&gt;\n    My name is &lt;strong&gt;&#123;user_input1&#125;&lt;&#x2F;strong&gt;, Here is my Message: &#123;user_input2&#125;\n    &lt;&#x2F;div&gt;\n    &quot;&quot;&quot;\n    print(safe_html(html_template))\n    #\n    #    &lt;div&gt;\n    #    My name is &lt;strong&gt;duzhuo&lt;&#x2F;strong&gt;, Here is my Message: &lt;script&gt;alert(&quot;XSS Attacking&quot;)&lt;&#x2F;script&gt;\n    #    &lt;&#x2F;div&gt;\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    main()\n\n\n"},{"title":"VMware-tools 无法安装问题解决","url":"/2023/02/06/VMware-tools-Issue/","content":"问题描述\nWMware版本 WMware Workstation PRO 16.2.3\n安装镜像版本:Windows7 x64\n自动安装的VMware Tools 版本为11.3.5出现提示Windows无法验证此驱动程序软件发布者导致出错无法安装\n\n图示如下\n解决办法\n安装 VMware Tools 11.0.0\n挂载iso镜像到虚拟机\n运行setup64.exe\n安装成功后重启\n\n图示如下\n相关下载链接与分流VM-toolsVM-tools OneDrive分流\n提示升级Win7版本到sp1 相关补丁\n","tags":["VMware"]},{"title":"Windows11更新后出错后卸载更新","url":"/2023/04/01/Windows11-Update-Rollback/","content":"问题描述\n\n设备 : Swift SF314-512\n系统 : Windows11 22H2 22621.525\n\n推送补丁 KB5023778 更新后出现进入桌面闪屏 无法加载桌面图标的问题\n解决方法 卸载 KB5023778\nWin+Alt+Del 按住 Shift 点击重启\n疑难解答 → 高级选项 → 卸载更新\n\n\n"},{"title":"关于 z-library 的访问 (2023-11-28)","url":"/2023/11/15/about-z-lib/","content":"目前访问方法\nhttp://singlelogin.re/ \nhttp://zlibrary-global.se/\nhttp://zh.loginzlib2vrak5zzpcocc3ouizykn6k5qecgj2tzlnab5wcbqhembyd.onion/ 登录后跳转\nblackbox@zlib.se 发送邮件自动返回访问地址 (测试被Gmail标记为垃圾邮件)\n\n\n相关阅读与回旋镖\n2022年10月底，TikTok屏蔽了#ZLibrary主题标签[23]。11月3日，美国司法部和联邦调查局根据法庭判令，查封Z-Library部分域名[24][25][26]。z-lib.org、b-ok.org、3lib.net的DNS服务器曾更换成美国执法部门常用于查封行动的NS1.SEIZEDSERVERS.COM和NS2.SEIZEDSERVERS.COM，不过及后又再更改为匿名托管服务提供者Njalla的DNS服务器[27]。\n虽然通告一度写道，美国邮政检查局查封了该网站[27]，但其内容及后得以更正[26]。截至目前，网站的Tor隐藏服务网址与singlelogin.me域名仍可继续使用，且在后者提供的内容中表示该网站目前只能在Tor与I2P网络中使用。Z-Library的营运者则把Tor与I2P外的网站故障的原因解释为托管服务问题[24][27]。\n2022年11月3日，Z-Library的两位俄罗斯籍经营者在阿根廷科尔多瓦被捕[28]。美国纽约东区检察官指两人于2018年至2022年间经营Z-Library，从事犯罪活动，涉嫌“刑事盗版、电汇诈骗及洗钱”[29]。据TorrentFreak报道，美国联邦调查员直接向Google和亚马逊公司发出搜查令，要求两者提供两人的个人信息，包括邮件地址、礼品卡交易记录等，最终锁定两人的身份[30]。\n2023年2月11日，用户可以再次访问Z-Library，不过用户要点击singlelogin.me链接并登录他们的帐户才能访问Z-Library。[31]此后它亦计划在各地开设“Z-Points”，予人分享实体书[32]。5月，美国当局再度冻结Z-Library部分域名（包含singlelogin.me）[1]。—— 维基百科条目 Z-Library\n\n回旋镖来咯\n我认为，无论是企业还是个人，在做网站的时候，要尽量避免注册和使用CN域名，因为使用CN域名后会产生巨大的政策性风险和安全风险，同时，该风险难以通过技术手动进行规避，等出了问题再想到更换COM域名，将会损失惨重。\n政策性风险\n注册CN域名的最大风险就是政策性风险，对于网站来说，一把“达摩克利斯之剑”就立刻悬在头上，它的名字叫“clientHold(域名暂停解析)”，你的域名随时可能会因为种种原因而被停用，虽然这个CN域名是你掏钱购买注册的，在中国，你注册的域名根本不属于你自己，你的域名随时都处于被“clientHold(域名暂停解析)”的状态，可能仅仅因为你网站上的一条留言、一个评论，就会让你的域名被永久封禁。\n这里面最知名的一个案例是罗永浩的牛博网，使用CN域名的牛博网一度聚集了梁文道、韩寒、连岳、柴静等一批名家，日访问量曾突破百万，但正是因为使用CN域名，才导致政策性风险发生后无法进行避规风险，网站访问量迅速消失，几年之后，连牛博网的域名也莫名其妙被人抢走了。\n2009年1月9日，国内知名博客站点牛博网的CN域名无法访问，该站点负责人罗永浩透露，说他收到服务商万网的通知，称该博客存在有害信息，被要求整改，因此万网需要停止该CN域名的访问权限。在收到这封信后不久，罗永浩即接到其服务器托管商的客服电话，声称机房接到通信管理局的通知要求关闭牛博网。至此，牛博网无法访问。\n牛博网的CN域名被万网停止访问权限（ClientHold），证明了注册和使用CN域名对于企业来说存在着巨大的不可控制的风险，一个网络公司使用CN域名开展互联网应用完全是一场灾难，COM域名再次显示了其特有的价值。\n我们知道，罗永浩注册的CN域名和牛博网是两个不同的东西，域名是域名，网站是网站，如果网站上存在有害信息，那么可以停止服务器访问，但不可能直接停止域名的访问权限，这显得毫无道理，在国际上都从来没有听说过这种莫名其妙的操作。\n在国际上，谁听说过域名服务商可以随便停止域名的访问权限？简直是闻所未闻，不可思议。如果在国外使用COM域名，任何一家注册商都没有权限无端中止你的域名访问，即使中止访问，那也是主机商去中止网站服务器的访问，域名访问不会中止。\n技术性风险\n在国内注册CN域名，很多时候，你并没有域名的完全管理的权限，很多本来属于你的权限可能是他们提供的“功能”，你要另外花钱买；此外，国内域名的解锁迁移通常很麻烦，域名注册商会设置各种条件(例如：收费、续费一年才给密码、邮寄证明材料等)来提高域名迁移的难度，让域名转移、域名过户变得非常困难。牛博网的CN域名就是因为被万网ClientHold之后，无法进行迁移和续费，最终导致该域名过期后被其他人抢占。\n因此，我推荐国内的企业，最好是通过美国的域名注册商注册COM域名，千万不要在国内注册CN域名。通常情况下，美国的域名注册商都是ICANN的成员，在域名仲裁以及管理上的级别远远高于国内任何一个域名注册商。并且美国是法制国家，域名注册商绝对不会出卖客户的隐私信息的，也不会违规取消客户的域名。因此，在美国注册域名安全、可靠、实惠，总的来说远远优于在国内注册CN域名。\n总之，这次万网停止了牛博网CN域名的访问权限，可谓开了一个极其恶劣的先例，对于整个CN域名的商业化应用带来的冲击是不可想象的，这让更多的中国企业在注册域名的时候，会首先考虑到CN域名的这种巨大风险，从而不再使用CN域名，而使用国外域名注册服务（如GoDaddy）注册COM域名，随着CN域名的低价推广活动的中止，CN域名的价值将会步入一个低谷，注册数量将会越来越少，相信有识之士都不会再使用CN域名了。\n关于如何在国外注册COM域名，请参见我另外一篇文章：《在国外进行国际域名注册》\n—— 月光博客文章《警告——不要在国内注册和使用CN域名》\n\n"},{"title":"dota2 反高台眼","url":"/2022/03/20/dota2-deward/","content":"dota2反高台眼常规的直接插真眼\n\n\n\n把鸡拉上高台\n\n\n\n\n英雄技能的VS\n\n\n\n宙斯\n\n\n\n蝙蝠\n\n\n\n冰龙\n\n      \n\n冰魂\n\n     \n\n冰女\n\n\n\n船长\n\n\n\n大牛\n\n\n\n电狗\n\n\n\n电棍\n\n\n\n大圣\n\n\n\n毒狗\n\n\n\n光法\n\n\n\n发条\n\n\n\n海民\n\n\n\n火枪\n\n\n\n剧毒\n\n\n\n双头龙\n\n\n\n小松鼠\n\n\n\n土猫\n\n\n\n先知\n\n\n\n血魔\n\n\n\n幽鬼\n\n\n\n炸弹人\n\n\n\npuck\n\n\n\nTA\n\n\n\n萨尔\n\n\n","tags":["dota2","刀塔"]},{"title":"dota2单排病历本","url":"/2024/09/27/dota2%E5%8D%95%E6%8E%92%E7%97%85%E5%8E%86%E6%9C%AC/","content":"2024.09.26\n熊德 大败 PA天怒串起来了\n熊德 大败 酱油风行对线抢刀不勾兵不推塔\n熊德 输 我是菜逼带错命石了\n熊德 输 节奏不对\n熊德 宰猪 拆塔老快了\n\n2024.09.27\n炼金 被火枪保享福 gg\n熊德 畜生宙斯还在玩魔晶分身斧 敌法无输出\n熊德 4v5打了40min两个盾拆掉高地\n\n"},{"title":"解决sqlacodegen2.3.0.post1在python3.11下使用报错","url":"/2024/06/05/fix-sqlacodegen-2.3.0.post1-on-python3.11.py/","content":"错误提示Traceback (most recent call last):\n  File &quot;&#x2F;home&#x2F;duzhuo&#x2F;src&#x2F;scraper-test&#x2F;.venv&#x2F;bin&#x2F;sqlacodegen&quot;, line 5, in &lt;module&gt;\n    from sqlacodegen.main import main\n  File &quot;&#x2F;home&#x2F;duzhuo&#x2F;src&#x2F;scraper-test&#x2F;.venv&#x2F;lib&#x2F;python3.11&#x2F;site-packages&#x2F;sqlacodegen&#x2F;main.py&quot;, line 11, in &lt;module&gt;\n    from sqlacodegen.codegen import CodeGenerator\n  File &quot;&#x2F;home&#x2F;duzhuo&#x2F;src&#x2F;scraper-test&#x2F;.venv&#x2F;lib&#x2F;python3.11&#x2F;site-packages&#x2F;sqlacodegen&#x2F;codegen.py&quot;, line 9, in &lt;module&gt;\n    from inspect import ArgSpec\nImportError: cannot import name &#39;ArgSpec&#39; from &#39;inspect&#39; (&#x2F;usr&#x2F;lib&#x2F;python3.11&#x2F;inspect.py)\n\n来自GPT的错误分析：您遇到的错误消息是由于 inspect.ArgSpec 类在 Python 3.11 中被移除了。ArgSpec 类在 Python 3.5 中已被弃用，并在 Python 3.11 中被移除。\n当前使用的sqlacodegen版本为2.3.0.post1。是pypi上面的默认release版本。\n解决方法编辑 .venv/lib/python3.11/site-packages/sqlacodegen/codegen.py\n找到from inspect import ArgSpec替换成from inspect import FullArgSpec as ArgSpec\n或者升级sqlacodegen版本到3.0.0 rc3以上。来源：https://github.com/agronholm/sqlacodegen/issues/239#issuecomment-1871370700\n"},{"title":"Hello World","url":"/2022/01/15/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"关于jellyfin的api调用","url":"/2024/07/27/jellyfin-api/","content":"前两天尝试写一个给jellyfin服务器添加演员信息的程序，读issue和参考别人的代码的时候发现很多验证的步骤比较过时，故自己写一点留档参考。\nswagger api文档 http://localhost:8096/api-docs/swagger\n在请求头添加验证 https://gist.github.com/nielsvanvelzen/ea047d9028f676185832e51ffaf12a6f\n服务端创建api密钥 http://localhost:8096/web/#/dashboard/keys\nuserId获取 http://localhost:8096/web/#/dashboard/users 点击你想获得userId的用户并在url的query部分查看\n例如 http://192.168.2.202:8096/web/#/dashboard/users/profile?userId=99e7058d92d34f74bd369728f432a0e2\n代码参考import requests\nimport json\n\njellyfin_apiKey &#x3D; &quot;3287930a2ab9422eaa6e1dc4a5f23c24&quot;\njellyfin_host &#x3D; &quot;http:&#x2F;&#x2F;192.168.2.202:8096&quot;\njellyfin_userId &#x3D; &quot;99e7058d92d34f74bd369728f432a0e2&quot;\n\njellyfin_headers &#x3D; &#123;\n    &#39;accept&#39;: &#39;*&#x2F;*&#39;,\n    &quot;Authorization&quot;: f&#39;MediaBrowser Token&#x3D;&quot;&#123;jellyfin_apiKey&#125;&quot;&#39;,\n    &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;,\n&#125;\n\n# 获取全部演员信息，返回json\nresponse &#x3D; requests.get(f&#39;&#123;jellyfin_host&#125;&#x2F;Persons?userId&#x3D;&#123;jellyfin_userId&#125;&#39;,headers&#x3D;jellyfin_headers)\ndict &#x3D; response.json()\nprint(dict)\n\n# 获取单个演员信息\nactor_name &#x3D; &#39;*****&#39;\nresponse &#x3D; requests.get(f&#39;&#123;jellyfin_host&#125;&#x2F;Persons&#x2F;&#123;actor_name&#125;?userId&#x3D;&#123;jellyfin_userId&#125;&#39;,headers&#x3D;jellyfin_headers)\ndict &#x3D; response.json()\nprint(dict)\n# 修改演员Overview并提交\nactor_id &#x3D; dict[&quot;Id&quot;]\n# Overview支持html标签\ndict[&quot;Overview&quot;] &#x3D; &quot;&quot;&quot;1988年5月24日生まれ&lt;br&gt;\n身長&lt;b&gt;163cm&lt;&#x2F;b&gt;&lt;br&gt;\n&lt;b&gt;Ｂ88cm&lt;&#x2F;b&gt;&lt;br&gt;\n&lt;b&gt;Ｗ59cm&lt;&#x2F;b&gt;&lt;br&gt;\n&lt;b&gt;Ｈ85cm&lt;&#x2F;b&gt;&lt;br&gt;\nブラ &lt;b&gt;Eカップ&lt;&#x2F;b&gt;&quot;&quot;&quot;\nresponse &#x3D; requests.post(f&#39;&#123;jellyfin_host&#125;&#x2F;Items&#x2F;&#123;actor_id&#125;?userId&#x3D;&#123;jellyfin_userId&#125;&#39;, headers&#x3D;jellyfin_headers,json&#x3D;dict)\n# 成功返回204\nprint(response.status_code)\n\n\n\n"},{"title":"Mourn RARBG","url":"/2023/06/01/mourn-rarbg/","content":"\nHello guys,We would like to inform you that we have decided to shut down our site.The past 2 years have been very difficult for us - some of the people in our team died due to covid complications,others still suffer the side effects of it - not being able to work at all.Some are also fighting the war in Europe - ON BOTH SIDES.Also, the power price increase in data centers in Europe hit us pretty hard.Inflation makes our daily expenses impossible to bare.Therefore we can no longer run this site without massive expenses that we can no longer cover out of pocket.After an unanimous vote we’ve decided that we can no longer do it.We are sorry :(Bye\n\n\n妈的 我用 AdBlock 把 RARBG 的广告屏蔽了 我真是个畜生 😭\n\nPeace. 🥀\n"},{"title":"pandora+docker 私有化部署ChatGPT","url":"/2023/04/06/pandora-guide/","content":"环境更新环境Debian11 + Docker\nLinux duzhuo 5.10.0-21-amd64 #1 SMP Debian 5.10.162-1 (2023-01-21) x86_64 GNU&#x2F;Linux\n\nDocker Compose version v2.17.2\n\nDocker version 23.0.2, build 569dd73\n\napt-get update -y\n\napt-get install apt-transport-https software-properties-common ca-certificates curl gnupg lsb-release -y\n\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n\n需要的 Docker 镜像\npengzhile&#x2F;pandora\ndocker pull pengzhile/pandora\n\nnginx\ndocker pull nginx\n\n\n配置文件treeroot@duzhuo:~&#x2F;.pandora# tree\n.\n├── data\n│   └── access_token.dat\n├── docker-compose-pandora.yaml\n├── docker-compose.yaml.bak\n└── nginx\n    ├── certs\n    │   ├── cert.pem\n    │   └── key.pem\n    ├── htpasswd\n    └── nginx.conf\n\n3 directories, 7 files\nroot@duzhuo:~&#x2F;.pandora# \n\ndocker-compose.yamlversion: &#39;3.8&#39;\n\n# 定义一个名为 &quot;pandora&quot; 的 Docker 网络\nnetworks:\n  pandora:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 192.168.0.0&#x2F;24\n\n# 定义两个 Docker 服务: &quot;Nginx-Reverse-proxy&quot; 和 &quot;pandora&quot;\nservices:\n  # Nginx-Reverse-proxy 服务\n  Nginx-Reverse-proxy:\n    # 使用 nginx Docker 镜像\n    image: nginx\n    # 将端口 80 和 443 映射到宿主机\n    ports:\n      - 80:80\n      - 443:443\n    # 除非停止，否则重新启动容器\n    restart: unless-stopped\n    # 挂载多个卷以进行配置文件和 SSL 证书\n    volumes:\n      - .&#x2F;nginx&#x2F;nginx.conf:&#x2F;etc&#x2F;nginx&#x2F;nginx.conf:ro\n      - .&#x2F;nginx&#x2F;certs:&#x2F;etc&#x2F;nginx&#x2F;certs:ro\n      - .&#x2F;nginx&#x2F;htpasswd:&#x2F;etc&#x2F;nginx&#x2F;htpasswd:ro\n      - .&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html:ro\n    # 将容器连接到 &quot;pandora&quot; 网络并分配一个 IPv4 地址\n    networks:\n      pandora:\n        ipv4_address: 192.168.0.4\n\n  # pandora 服务\n  pandora:\n    # 使用 pengzhile&#x2F;pandora Docker 镜像\n    image: pengzhile&#x2F;pandora\n    # 将容器命名为 &quot;pandoraGPT&quot;\n    container_name: pandoraGPT\n    # 将容器连接到 &quot;pandora&quot; 网络并分配一个 IPv4 地址\n    networks:\n      pandora:\n        ipv4_address: 192.168.0.2\n    # 将 &quot;data&quot; 目录作为容器内的卷挂载\n    volumes:\n      - .&#x2F;data:&#x2F;data\n    # 除非停止，否则重新启动容器\n    restart: unless-stopped\n    # 设置多个环境变量\n    environment:\n      # 将 PANDORA_SERVER 环境变量设置为监听所有可用的网络接口和端口 18888\n      PANDORA_SERVER: 0.0.0.0:18888\n      # 将 OPENAI_EMAIL 环境变量设置为指定的电子邮件地址\n      OPENAI_EMAIL: &#123;YourAccount&#125;\n      # 将 OPENAI_PASSWORD 环境变量设置为指定的密码\n      OPENAI_PASSWORD: &#123;YourPassword&#125;\n      # 建议替换 OPENAI_EMAIL 和 OPENAI_PASSWORD\n      # PANDORA_ACCESS_TOKEN: &#123;YourAccessToken&#125;\n\nACCESS TOKEN 获取https://chat.gateway.do/auth\nNginx.confuser  nginx;  # 设置运行Nginx的用户为nginx\n\nworker_processes  1;  # 设置工作进程数为1\n\nevents &#123;\n\n    worker_connections  128;  # 每个worker进程最多允许的连接数\n\n&#125;\n\nhttp &#123;\n\n    server &#123;\n        listen 80;  # 监听80端口，处理http请求\n\n        server_name chat.duzhuo.eu.org;  # 域名\n\n        return 301 https:&#x2F;&#x2F;$host$request_uri;  # 将所有http请求重定向到https\n    &#125;\n\n    server &#123;\n        listen 443 ssl http2;  # 监听443端口，处理https请求，启用http2协议\n        server_name chat.duzhuo.eu.org;  # 域名\n\n        ssl_certificate &#x2F;etc&#x2F;nginx&#x2F;certs&#x2F;cert.pem;  # SSL证书路径\n        ssl_certificate_key &#x2F;etc&#x2F;nginx&#x2F;certs&#x2F;key.pem;  # SSL证书密钥路径\n\n        auth_basic &quot;Restricted&quot;;  # 开启基本认证\n        auth_basic_user_file &#x2F;etc&#x2F;nginx&#x2F;htpasswd;  # 用户名密码文件路径\n\n        location &#x2F; &#123;\n            proxy_pass http:&#x2F;&#x2F;192.168.0.2:18888;  # 将请求转发给目标服务器\n            proxy_set_header Host $host;  # 设置Host请求头\n            proxy_set_header X-Real-IP $remote_addr;  # 设置X-Real-IP请求头\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 设置X-Forwarded-For请求头\n        &#125;\n    &#125;\n&#125;\n\nauth_basic密码设置apt-get update\napt-get install apache2-utils\n初次创建htpasswd文件 并添加一个叫user的用户\nhtpasswd -c /path/to/htpasswd user\n向htpasswd文件中添加一个叫anotheruser的用户\nhtpasswd /path/to/htpasswd anotheruser\n获取一个SSL证书通过acme.shhttps://acme.sh\n通过Cloudflarehttps://cloudflare.com\n证书放置目录 参考 tree\n启动和停止服务root@duzhuo:~&#x2F;.pandora# docker-compose -f docker-compose-pandora.yaml up -d\n[+] Running 3&#x2F;3\n ✔ Network pandora_pandora                  Created                                                                                                    0.2s \n ✔ Container pandoraGPT                     Started                                                                                                    3.1s \n ✔ Container pandora-Nginx-Reverse-proxy-1  Started                                                                                                    3.1s \nroot@duzhuo:~&#x2F;.pandora#\n\nroot@duzhuo:~&#x2F;.pandora# docker-compose -f docker-compose-pandora.yaml down\n[+] Running 3&#x2F;3\n ✔ Container pandoraGPT                     Removed                                                                                                   12.4s \n ✔ Container pandora-Nginx-Reverse-proxy-1  Removed                                                                                                    3.0s \n ✔ Network pandora_pandora                  Removed                                                                                                    0.4s \nroot@duzhuo:~&#x2F;.pandora#  \n\nOpen and play !\n"},{"title":"phpMyAdmin + MySQL docker-compose.yaml","url":"/2023/09/12/phpMyAdmin-MySQL/","content":"version: &#39;3&#39;\n\nnetworks:\n  mysql-phpmyadmin:\n    name: mysql-phpmyadmin\n    driver: bridge\n\nvolumes:\n  mysqldata:\n    driver: local\n    driver_opts:\n      type: &#39;none&#39;\n      o: &#39;bind&#39;\n      device: &#39;&#x2F;home&#x2F;duzhuo&#x2F;docker&#x2F;mysql&#x2F;data&#39;\n\nservices:\n  mysql:\n    image: mysql\n    container_name: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: 123456\n      MYSQL_DATABASE: database\n      MYSQL_USER: duzhuo\n      MYSQL_PASSWORD: 123456\n    ports:\n      - &quot;33060:3306&quot;\n    volumes:\n      - mysqldata:&#x2F;var&#x2F;lib&#x2F;mysql\n    networks:\n      # Connect the mysql container to the mysql-phpmyadmin network and set the alias as mysql\n      mysql-phpmyadmin:\n        aliases:\n          - mysql\n\n  phpmyadmin:\n    image: phpmyadmin\n    container_name: phpmyadmin\n    links:\n      - mysql\n    environment:\n      PMA_HOST: mysql\n      PMA_PORT: 3306\n    ports:\n      - 8081:80\n    networks:\n      # Connect the phpmyadmin container to the mysql-phpmyadmin network and set the alias as phpmyadmin\n      mysql-phpmyadmin:\n        aliases:\n          - phpmyadmin"},{"title":"Python中main函数的使用","url":"/2024/06/19/python%E4%B8%ADmain%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"在查看Python代码中，经常会看到类似这样的代码：\n# module.py\ndef example() -&gt; None:\n    print(&quot;This is an example.&quot;)\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    example()\n\n这里直接运行文件可以获得输出内容：\n$ python3 module.py\nThis is an example.\n\n现在我们在另一个文件中将module.py作为模块导入并运行：\n# main.py\nfrom module import example\n\nexample()\n\n$ python3 main.py\nThis is an example.\n\n我们修改module.py文件，在测试中我们经常会这么写：\n# module.py\ndef example() -&gt; None:\n    print(&quot;This is an example.&quot;)\n\nexample()\n\n分别运行module.py main.py：\n$ python3 module.py\nThis is an example.\n\n$ python3 main.py\nThis is an example.\nThis is an example.\n\n我们注意到，main.py在运行时输出了两遍。这是因为python解释器第一次导入一个模块时，解释器会为我们找到并执行其顶层代码。其中包括任何变量声明、函数和类定义，以及任何顶层的可执行代码。\n故为了避免我们将文件作为模块导入使用时运行不必要的代码，需要使用if __name__ == &quot;__main__&quot;: 对当作模块导入时不需要运行的部分进行屏蔽。\n但是，当作模块导入并不需要使用if __name__ == &quot;__main__&quot;: 的情况也会存在，其中最有名的就是import this使得程序在运行时输出大名鼎鼎的PEP 20 – The Zen of Python。\n在代码测试部分中添加if __name__ == &#39;__main__&#39;:避免不必要的初始化是一个好习惯，也可以按照需求进行选择。\n"},{"title":"simple-practicemode 文档","url":"/2022/02/18/simple-practicemode%20%E6%96%87%E6%A1%A3/","content":"simple-practicemodeIntro基于csgo-practice-mode，删减了部分内容，更好地适配csgowiki-pack\nFeature\n 不再与csgo-pug-setup和get5兼容。simple-practicemode是一个单独且纯粹的跑图插件。\n 删除原跑图插件的本地道具仓库功能，.nades、.cats相关功能取消。因为csgowiki-pack已经具有部分道具合集的功能。\n 重构botmimic插件，使其适配sourcemod v1.11语法，重构后的插件名&#x2F;Libary名称为botmimic_fix。\n 新增计时器面板功能，.timers或。timers开启，整合了三种计时器类型。\n 新增。command指令触发方式，方便中文输入法用户避免频繁切换输入法。\n 更全面友好的汉化内容。\n\nCompilingnecessary .inc needed\n\nsourcemod v1.10 stable\nsmlib\n\ncompiled files:\n\nbotmimic_fix.smx\ncsutils.smx\npracticemode.smx\n\n"},{"title":"sudo: unable to resolve host hostname: Name or service not known","url":"/2023/11/09/sudo-unable-to-resolve-host-hostname-Name-or-service-not-known/","content":"问题复现使用 hostnamectl hostname  命令更改 hostname 之后使用 sudo 后出现报错  sudo: unable to resolve host cloudcone: Name or service not known\n解决方案修改 /etc/hosts 文件 添加 127.0.0.1 cloudcone ::1 cloudcone cloudcone 是我设置的新 hostname\n27.0.0.1       localhost\n127.0.0.1       cloudcone\n\n# The following lines are desirable for IPv6 capable hosts\n::1     localhost ip6-localhost ip6-loopback\n::1     cloudcone\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\n\n\n"},{"title":"Systemd 应用","url":"/2022/02/20/systemd/","content":"Systemd 应用\n搬运自：Systemd 入门教程：命令篇、Systemd 入门教程：实战篇\n\nSystemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。\n本文介绍它的基本用法，分为上下两篇。今天介绍它的主要命令，下一篇介绍如何用于实战。\n1. 由来历史上，Linux 的启动一直采用init进程。\n下面的命令用来启动服务。\n$ sudo &#x2F;etc&#x2F;init.d&#x2F;apache2 start\n# 或者\n$ service apache2 start\n\n这种方法有两个缺点。\n一是启动时间长。init进程是串行启动，只有前一个进程启动完，才会启动下一个进程。\n二是启动脚本复杂。init进程只是执行启动脚本，不管其他事情。脚本需要自己处理各种情况，这往往使得脚本变得很长。\n2. Systemd 概述Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案。\n根据 Linux 惯例，字母d是守护进程（daemon）的缩写。 Systemd 这个名字的含义，就是它要守护整个系统。\n使用了 Systemd，就不需要再用init了。Systemd 取代了initd，成为系统的第一个进程（PID 等于 1），其他进程都是它的子进程。\n$ systemctl --version\n\n上面的命令查看 Systemd 的版本。\nSystemd 的优点是功能强大，使用方便，缺点是体系庞大，非常复杂。事实上，现在还有很多人反对使用 Systemd，理由就是它过于复杂，与操作系统的其他部分强耦合，违反”keepsimple, keep stupid”的Unix 哲学。\n\n（上图为 Systemd 架构图）\n3. 系统管理Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。\n3.1. systemctlsystemctl是 Systemd 的主命令，用于管理系统。\n# 重启系统\n$ sudo systemctl reboot\n\n# 关闭系统，切断电源\n$ sudo systemctl poweroff\n\n# CPU停止工作\n$ sudo systemctl halt\n\n# 暂停系统\n$ sudo systemctl suspend\n\n# 让系统进入冬眠状态\n$ sudo systemctl hibernate\n\n# 让系统进入交互式休眠状态\n$ sudo systemctl hybrid-sleep\n\n# 启动进入救援状态（单用户状态）\n$ sudo systemctl rescue\n\n3.2. systemd-analyzesystemd-analyze命令用于查看启动耗时。\n# 查看启动耗时\n$ systemd-analyze\n\n# 查看每个服务的启动耗时\n$ systemd-analyze blame\n\n# 显示瀑布状的启动过程流\n$ systemd-analyze critical-chain\n\n# 显示指定服务的启动流\n$ systemd-analyze critical-chain atd.service\n\n3.3. hostnamectlhostnamectl命令用于查看当前主机的信息。\n# 显示当前主机的信息\n$ hostnamectl\n\n# 设置主机名。\n$ sudo hostnamectl set-hostname rhel7\n\n3.4. localectllocalectl命令用于查看本地化设置。\n# 查看本地化设置\n$ localectl\n\n# 设置本地化参数。\n$ sudo localectl set-locale LANG&#x3D;en_GB.utf8\n$ sudo localectl set-keymap en_GB\n\n3.5. timedatectltimedatectl命令用于查看当前时区设置。\n# 查看当前时区设置\n$ timedatectl\n\n# 显示所有可用的时区\n$ timedatectl list-timezones\n\n# 设置当前时区\n$ sudo timedatectl set-timezone America&#x2F;New_York\n$ sudo timedatectl set-time YYYY-MM-DD\n$ sudo timedatectl set-time HH:MM:SS\n\n3.6. loginctlloginctl命令用于查看当前登录的用户。\n# 列出当前session\n$ loginctl list-sessions\n\n# 列出当前登录用户\n$ loginctl list-users\n\n# 列出显示指定用户的信息\n$ loginctl show-user ruanyf\n\n4. Unit4.1. 含义Systemd 可以管理所有系统资源。不同的资源统称为 Unit（单位）。\nUnit 一共分成 12 种。\n\nService unit：系统服务\nTarget unit：多个 Unit 构成的一个组\nDevice Unit：硬件设备\nMount Unit：文件系统的挂载点\nAutomount Unit：自动挂载点\nPath Unit：文件或路径\nScope Unit：不是由 Systemd 启动的外部进程\nSlice Unit：进程组\nSnapshot Unit：Systemd 快照，可以切回某个快照\nSocket Unit：进程间通信的 socket\nSwap Unit：swap 文件\nTimer Unit：定时器\n\nsystemctl list-units命令可以查看当前系统的所有 Unit 。\n# 列出正在运行的 Unit\n$ systemctl list-units\n\n# 列出所有Unit，包括没有找到配置文件的或者启动失败的\n$ systemctl list-units --all\n\n# 列出所有没有运行的 Unit\n$ systemctl list-units --all --state&#x3D;inactive\n\n# 列出所有加载失败的 Unit\n$ systemctl list-units --failed\n\n# 列出所有正在运行的、类型为 service 的 Unit\n$ systemctl list-units --type&#x3D;service\n\n4.2. Unit 的状态systemctl status命令用于查看系统状态和单个 Unit 的状态。\n# 显示系统状态\n$ systemctl status\n\n# 显示单个 Unit 的状态\n$ sysystemctl status bluetooth.service\n\n# 显示远程主机的某个 Unit 的状态\n$ systemctl -H root@rhel7.example.com status httpd.service\n\n除了status命令，systemctl还提供了三个查询状态的简单方法，主要供脚本内部的判断语句使用。\n# 显示某个 Unit 是否正在运行\n$ systemctl is-active application.service\n\n# 显示某个 Unit 是否处于启动失败状态\n$ systemctl is-failed application.service\n\n# 显示某个 Unit 服务是否建立了启动链接\n$ systemctl is-enabled application.service\n\n4.3. Unit 管理对于用户来说，最常用的是下面这些命令，用于启动和停止 Unit（主要是 service）。\n# 立即启动一个服务\n$ sudo systemctl start apache.service\n\n# 立即停止一个服务\n$ sudo systemctl stop apache.service\n\n# 重启一个服务\n$ sudo systemctl restart apache.service\n\n# 杀死一个服务的所有子进程\n$ sudo systemctl kill apache.service\n\n# 重新加载一个服务的配置文件\n$ sudo systemctl reload apache.service\n\n# 重载所有修改过的配置文件\n$ sudo systemctl daemon-reload\n\n# 显示某个 Unit 的所有底层参数\n$ systemctl show httpd.service\n\n# 显示某个 Unit 的指定属性的值\n$ systemctl show -p CPUShares httpd.service\n\n# 设置某个 Unit 的指定属性\n$ sudo systemctl set-property httpd.service CPUShares&#x3D;500\n\n4.4. 依赖关系Unit 之间存在依赖关系：A 依赖于 B，就意味着 Systemd 在启动 A 的时候，同时会去启动 B。\nsystemctl list-dependencies命令列出一个 Unit 的所有依赖。\n$ systemctl list-dependencies nginx.service\n\n上面命令的输出结果之中，有些依赖是 Target 类型（详见下文），默认不会展开显示。如果要展开 Target，就需要使用--all参数。\n$ systemctl list-dependencies --all nginx.service\n\n5. Unit 的配置文件5.1. 概述每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s &#39;&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;clamd@scan.service&#39; &#39;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;clamd@scan.service&#39;\n\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n$ sudo systemctl disable clamd@scan.service\n\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n5.2. 配置文件的状态systemctl list-unit-files命令用于列出所有配置文件。\n# 列出所有配置文件\n$ systemctl list-unit-files\n\n# 列出指定类型的配置文件\n$ systemctl list-unit-files --type&#x3D;service\n\n这个命令会输出一个列表。\n$ systemctl list-unit-files\n\nUNIT FILE              STATE\nchronyd.service        enabled\nclamd@.service         static\nclamd@scan.service     disabled\n\n这个列表显示每个配置文件的状态，一共有四种。\n\nenabled：已建立启动链接\ndisabled：没建立启动链接\nstatic：该配置文件没有[Install]部分（无法执行），只能作为其他配置文件的依赖\nmasked：该配置文件被禁止建立启动链接\n\n注意，从配置文件的状态无法看出，该 Unit 是否正在运行。这必须执行前面提到的systemctl status命令。\n$ systemctl status bluetooth.service\n\n一旦修改配置文件，就要让 SystemD 重新加载配置文件，然后重新启动，否则修改不会生效。\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart httpd.service\n\n5.3. 配置文件的格式配置文件就是普通的文本文件，可以用文本编辑器打开。\nsystemctl cat命令可以查看配置文件的内容。\n$ systemctl cat atd.service\n\n[Unit]\nDescription&#x3D;ATD daemon\n\n[Service]\nType&#x3D;forking\nExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;atd\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\n从上面的输出可以看到，配置文件分成几个区块。每个区块的第一行，是用方括号表示的区别名，比如[Unit]。注意，配置文件的区块名和字段名，都是大小写敏感的。\n每个区块内部是一些等号连接的键值对。\n[Section]\nDirective1&#x3D;value\nDirective2&#x3D;value\n\n. . .\n\n注意，键值对的等号两侧不能有空格。\n5.4. 配置文件的区块[Unit]区块通常是配置文件的第一个区块，用来定义 Unit 的元数据，以及配置与其他Unit 的关系。它的主要字段如下。\n\nDescription：简短描述\nDocumentation：文档地址\nRequires：当前 Unit 依赖的其他 Unit，如果它们没有运行，当前 Unit 会启动失败\nWants：与当前 Unit 配合的其他 Unit，如果它们没有运行，当前 Unit 不会启动失败\nBindsTo：与Requires类似，它指定的 Unit 如果退出，会导致当前 Unit 停止运行\nBefore：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之后启动\nAfter：如果该字段指定的 Unit 也要启动，那么必须在当前 Unit 之前启动\nConflicts：这里指定的 Unit 不能与当前 Unit 同时运行\nCondition...：当前 Unit 运行必须满足的条件，否则不会运行\nAssert...：当前 Unit 运行必须满足的条件，否则会报启动失败\n\n[Install]通常是配置文件的最后一个区块，用来定义如何启动，以及是否开机启动。它的主要字段如下。\n\nWantedBy：它的值是一个或多个 Target，当前 Unit 激活时（enable）符号链接会放入/etc/systemd/system目录下面以 Target 名 + .wants后缀构成的子目录中\nRequiredBy：它的值是一个或多个 Target，当前 Unit 激活时，符号链接会放入/etc/systemd/system目录下面以 Target 名 + .required后缀构成的子目录中\nAlias：当前 Unit 可用于启动的别名\nAlso：当前 Unit 激活（enable）时，会被同时激活的其他 Unit\n\n[Service]区块用来 Service 的配置，只有 Service 类型的 Unit 才有这个区块。它的主要字段如下。\n\nType：定义启动时的进程行为。它有以下几种值。\nType=simple：默认值，执行ExecStart指定的命令，启动主进程\nType=forking：以 fork 方式从父进程创建子进程，创建后父进程会立即退出\nType=oneshot：一次性进程，Systemd 会等当前服务退出，再继续往下执行\nType=dbus：当前服务通过 D-Bus 启动\nType=notify：当前服务启动完毕，会通知Systemd，再继续往下执行\nType=idle：若有其他任务执行完毕，当前服务才会运行\nExecStart：启动当前服务的命令\nExecStartPre：启动当前服务之前执行的命令\nExecStartPost：启动当前服务之后执行的命令\nExecReload：重启当前服务时执行的命令\nExecStop：停止当前服务时执行的命令\nExecStopPost：停止当其服务之后执行的命令\nRestartSec：自动重启当前服务间隔的秒数\nRestart：定义何种情况 Systemd 会自动重启当前服务，可能的值包括always（总是重启）、on-success、on-failure、on-abnormal、on-abort、on-watchdog\nTimeoutSec：定义 Systemd 停止当前服务之前等待的秒数\nEnvironment：指定环境变量\n\nUnit 配置文件的完整字段清单，请参考官方文档。\n6. Target启动计算机的时候，需要启动大量的 Unit。如果每一次启动，都要一一写明本次启动需要哪些 Unit，显然非常不方便。Systemd 的解决方案就是 Target。\n简单说，Target 就是一个 Unit 组，包含许多相关的 Unit 。启动某个 Target 的时候，Systemd 就会启动里面所有的 Unit。从这个意义上说，Target 这个概念类似于”状态点“，启动某个 Target 就好比启动到某种状态。\n传统的init启动模式里面，有 RunLevel 的概念，跟 Target 的作用很类似。不同的是，RunLevel 是互斥的，不可能多个 RunLevel 同时启动，但是多个 Target 可以同时启动。\n# 查看当前系统的所有 Target\n$ systemctl list-unit-files --type&#x3D;target\n\n# 查看一个 Target 包含的所有 Unit\n$ systemctl list-dependencies multi-user.target\n\n# 查看启动时的默认 Target\n$ systemctl get-default\n\n# 设置启动时的默认 Target\n$ sudo systemctl set-default multi-user.target\n\n# 切换 Target 时，默认不关闭前一个 Target 启动的进程，\n# systemctl isolate 命令改变这种行为，\n# 关闭前一个 Target 里面所有不属于后一个 Target 的进程\n$ sudo systemctl isolate multi-user.target\n\nTarget 与 传统 RunLevel 的对应关系如下。\nTraditional runlevel      New target name     Symbolically linked to...\n\nRunlevel 0           |    runlevel0.target -&gt; poweroff.target\nRunlevel 1           |    runlevel1.target -&gt; rescue.target\nRunlevel 2           |    runlevel2.target -&gt; multi-user.target\nRunlevel 3           |    runlevel3.target -&gt; multi-user.target\nRunlevel 4           |    runlevel4.target -&gt; multi-user.target\nRunlevel 5           |    runlevel5.target -&gt; graphical.target\nRunlevel 6           |    runlevel6.target -&gt; reboot.target\n\n它与init进程的主要差别如下。\n（1）默认的 RunLevel（在/etc/inittab文件设置）现在被默认的 Target 取代，位置是/etc/systemd/system/default.target，通常符号链接到graphical.target（图形界面）或者multi-user.target（多用户命令行）。\n（2）启动脚本的位置，以前是/etc/init.d目录，符号链接到不同的 RunLevel 目录 （比如/etc/rc3.d、/etc/rc5.d等），现在则存放在/lib/systemd/system和/etc/systemd/system目录。\n（3）配置文件的位置，以前init进程的配置文件是/etc/inittab，各种服务的配置文件存放在/etc/sysconfig目录。现在的配置文件主要存放在/lib/systemd目录，在/etc/systemd目录里面的修改可以覆盖原始设置。\n7. 日志管理Systemd 统一管理所有 Unit 的启动日志。带来的好处就是，可以只用journalctl一个命令，查看所有日志（内核日志和应用日志）。日志的配置文件是/etc/systemd/journald.conf。\njournalctl功能强大，用法非常多。\n# 查看所有日志（默认情况下 ，只保存本次启动的日志）\n$ sudo journalctl\n\n# 查看内核日志（不显示应用日志）\n$ sudo journalctl -k\n\n# 查看系统本次启动的日志\n$ sudo journalctl -b\n$ sudo journalctl -b -0\n\n# 查看上一次启动的日志（需更改设置）\n$ sudo journalctl -b -1\n\n# 查看指定时间的日志\n$ sudo journalctl --since&#x3D;&quot;2012-10-30 18:17:16&quot;\n$ sudo journalctl --since &quot;20 min ago&quot;\n$ sudo journalctl --since yesterday\n$ sudo journalctl --since &quot;2015-01-10&quot; --until &quot;2015-01-11 03:00&quot;\n$ sudo journalctl --since 09:00 --until &quot;1 hour ago&quot;\n\n# 显示尾部的最新10行日志\n$ sudo journalctl -n\n\n# 显示尾部指定行数的日志\n$ sudo journalctl -n 20\n\n# 实时滚动显示最新日志\n$ sudo journalctl -f\n\n# 查看指定服务的日志\n$ sudo journalctl &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd\n\n# 查看指定进程的日志\n$ sudo journalctl _PID&#x3D;1\n\n# 查看某个路径的脚本的日志\n$ sudo journalctl &#x2F;usr&#x2F;bin&#x2F;bash\n\n# 查看指定用户的日志\n$ sudo journalctl _UID&#x3D;33 --since today\n\n# 查看某个 Unit 的日志\n$ sudo journalctl -u nginx.service\n$ sudo journalctl -u nginx.service --since today\n\n# 实时滚动显示某个 Unit 的最新日志\n$ sudo journalctl -u nginx.service -f\n\n# 合并显示多个 Unit 的日志\n$ journalctl -u nginx.service -u php-fpm.service --since today\n\n# 查看指定优先级（及其以上级别）的日志，共有8级\n# 0: emerg\n# 1: alert\n# 2: crit\n# 3: err\n# 4: warning\n# 5: notice\n# 6: info\n# 7: debug\n$ sudo journalctl -p err -b\n\n# 日志默认分页输出，--no-pager 改为正常的标准输出\n$ sudo journalctl --no-pager\n\n# 以 JSON 格式（单行）输出\n$ sudo journalctl -b -u nginx.service -o json\n\n# 以 JSON 格式（多行）输出，可读性更好\n$ sudo journalctl -b -u nginx.serviceqq\n -o json-pretty\n\n# 显示日志占据的硬盘空间\n$ sudo journalctl --disk-usage\n\n# 指定日志文件占据的最大空间\n$ sudo journalctl --vacuum-size&#x3D;1G\n\n# 指定日志文件保存多久\n$ sudo journalctl --vacuum-time&#x3D;1years\n\n8. 实战8.1. 开机启动对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。\n如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。\n$ sudo systemctl enable httpd\n\n上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。\n这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。\n8.2. 启动服务设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件，那么要执行systemctl start命令。\n$ sudo systemctl start httpd\n\n执行上面的命令以后，有可能启动失败，因此要用systemctl status命令查看一下该服务的状态。\n$ sudo systemctl status httpd\n\nhttpd.service - The Apache HTTP Server\nLoaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;httpd.service; enabled)\nActive: active (running) since 金 2014-12-05 12:18:22 JST; 7min ago\nMain PID: 4349 (httpd)\nStatus: &quot;Total requests: 1; Current requests&#x2F;sec: 0; Current traffic:   0 B&#x2F;sec&quot;\nCGroup: &#x2F;system.slice&#x2F;httpd.service\n        ├─4349 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n        ├─4350 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n        ├─4351 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n        ├─4352 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n        ├─4353 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n        └─4354 &#x2F;usr&#x2F;sbin&#x2F;httpd -DFOREGROUND\n\n12月 05 12:18:22 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...\n12月 05 12:18:22 localhost.localdomain systemd[1]: Started The Apache HTTP Server.\n12月 05 12:22:40 localhost.localdomain systemd[1]: Started The Apache HTTP Server.\n\n上面的输出结果含义如下。\n\nLoaded行：配置文件的位置，是否设为开机启动\nActive行：表示正在运行\nMain PID行：主进程 ID\nStatus行：由应用本身（这里是 httpd ）提供的软件当前状态\nCGroup块：应用的所有子进程\n日志块：应用的日志\n\n8.3. 停止服务终止正在运行的服务，需要执行systemctl stop命令。\n$ sudo systemctl stop httpd.service\n\n有时候，该命令可能没有响应，服务停不下来。这时候就不得不”杀进程”了，向正在运行的进程发出kill信号。\n$ sudo systemctl kill httpd.service\n\n此外，重启服务要执行systemctl restart命令。\n$ sudo systemctl restart httpd.service\n\n8.4. 读懂配置文件一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。\n前面说过，配置文件主要放在/usr/lib/systemd/system目录，也可能在/etc/systemd/system目录。找到配置文件以后，使用文本编辑器打开即可。\nsystemctl cat命令可以用来查看配置文件，下面以sshd.service文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。\n$ systemctl cat sshd.service\n\n[Unit]\nDescription&#x3D;OpenSSH server daemon\nDocumentation&#x3D;man:sshd(8) man:sshd_config(5)\nAfter&#x3D;network.target sshd-keygen.service\nWants&#x3D;sshd-keygen.service\n\n[Service]\nEnvironmentFile&#x3D;&#x2F;etc&#x2F;sysconfig&#x2F;sshd\nExecStart&#x3D;&#x2F;usr&#x2F;sbin&#x2F;sshd -D $OPTIONS\nExecReload&#x3D;&#x2F;bin&#x2F;kill -HUP $MAINPID\nType&#x3D;simple\nKillMode&#x3D;process\nRestart&#x3D;on-failure\nRestartSec&#x3D;42s\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\n可以看到，配置文件分成几个区块，每个区块包含若干条键值对。\n下面依次解释每个区块的内容。\n8.5. [Unit] 区块：启动顺序与依赖关系。Unit区块的Description字段给出当前服务的简单描述，Documentation字段给出文档位置。\n接下来的设置是启动顺序和依赖关系，这个比较重要。\n\nAfter字段：表示如果network.target或sshd-keygen.service需要启动，那么sshd.service应该在它们之后启动。\n\n相应地，还有一个Before字段，定义sshd.service应该在哪些服务之前启动。\n注意，After和Before字段只涉及启动顺序，不涉及依赖关系。\n举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。\n设置依赖关系，需要使用Wants字段和Requires字段。\n\nWants字段：表示sshd.service与sshd-keygen.service之间存在”弱依赖”关系，即如果”sshd-keygen.service”启动失败或停止运行，不影响sshd.service继续执行。\n\nRequires字段则表示”强依赖”关系，即如果该服务启动失败或异常退出，那么sshd.service也必须退出。\n注意，Wants字段与Requires字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。\n8.6. [Service] 区块：启动行为Service区块定义如何启动当前服务。\n8.6.1. 启动命令许多软件都有自己的环境参数文件，该文件可以用EnvironmentFile字段读取。\n\nEnvironmentFile字段：指定当前服务的环境参数文件。该文件内部的key=value键值对，可以用$key的形式，在当前配置文件中获取。\n\n上面的例子中，sshd 的环境参数文件是/etc/sysconfig/sshd。\n配置文件里面最重要的字段是ExecStart。\n\nExecStart字段：定义启动进程时执行的命令。\n\n上面的例子中，启动sshd，执行的命令是/usr/sbin/sshd -D $OPTIONS，其中的变量$OPTIONS就来自EnvironmentFile字段指定的环境参数文件。\n与之作用相似的，还有如下这些字段。\n\nExecReload字段：重启服务时执行的命令\nExecStop字段：停止服务时执行的命令\nExecStartPre字段：启动服务之前执行的命令\nExecStartPost字段：启动服务之后执行的命令\nExecStopPost字段：停止服务之后执行的命令\n\n请看下面的例子。\n[Service]\nExecStart&#x3D;&#x2F;bin&#x2F;echo execstart1\nExecStart&#x3D;\nExecStart&#x3D;&#x2F;bin&#x2F;echo execstart2\nExecStartPost&#x3D;&#x2F;bin&#x2F;echo post1\nExecStartPost&#x3D;&#x2F;bin&#x2F;echo post2\n\n上面这个配置文件，第二行ExecStart设为空值，等于取消了第一行的设置，运行结果如下。\nexecstart2\npost1\npost2\n\n所有的启动设置之前，都可以加上一个连词号（-），表示”抑制错误”，即发生错误的时候，不影响其他命令的执行。比如，EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），就表示即使/etc/sysconfig/sshd文件不存在，也不会抛出错误。\n8.6.2. 启动类型Type字段定义启动类型。它可以设置的值如下。\n\nsimple（默认值）：ExecStart字段启动的进程为主进程\nforking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程\noneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务\ndbus：类似于simple，但会等待 D-Bus 信号后启动\nnotify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务\nidle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合\n\n下面是一个oneshot的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。\n[Unit]\nDescription&#x3D;Switch-off Touchpad\n\n[Service]\nType&#x3D;oneshot\nExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;touchpad-off\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\n上面的配置文件，启动类型设为oneshot，就表明这个服务只要运行一次就够了，不需要长期运行。\n如果关闭以后，将来某个时候还想打开，配置文件修改如下。\n[Unit]\nDescription&#x3D;Switch-off Touchpad\n\n[Service]\nType&#x3D;oneshot\nExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;touchpad-off start\nExecStop&#x3D;&#x2F;usr&#x2F;bin&#x2F;touchpad-off stop\nRemainAfterExit&#x3D;yes\n\n[Install]\nWantedBy&#x3D;multi-user.target\n\n上面配置文件中，RemainAfterExit字段设为yes，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用systemctl stop命令停止服务，ExecStop指定的命令就会执行，从而重新开启触摸板。\n8.6.3. 重启行为Service区块有一些字段，定义了重启行为。\n\nKillMode字段：定义 Systemd 如何停止 sshd 服务。\n\n上面这个例子中，将KillMode设为process，表示只停止主进程，不停止任何 sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。\nKillMode字段可以设置的值如下。\n\ncontrol-group（默认值）：当前控制组里面的所有子进程，都会被杀掉\nprocess：只杀主进程\nmixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号\nnone：没有进程会被杀掉，只是执行服务的 stop 命令。\n\n接下来是Restart字段。\n\nRestart字段：定义了 sshd 退出后，Systemd 的重启方式。\n\n上面的例子中，Restart设为on-failure，表示任何意外的失败，就将重启 sshd。如果sshd 正常停止（比如执行systemctl stop命令），它就不会重启。\nRestart字段可以设置的值如下。\n\nno（默认值）：退出后不会重启\non-success：只有正常退出时（退出状态码为 0），才会重启\non-failure：非正常退出时（退出状态码非 0），包括被信号终止和超时，才会重启\non-abnormal：只有被信号终止和超时，才会重启\non-abort：只有在收到没有捕捉到的信号终止时，才会重启\non-watchdog：超时退出，才会重启\nalways：不管是什么退出原因，总是重启\n\n对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。\n最后是RestartSec字段。\n\nRestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待 42 秒。\n\n8.7. [Install] 区块Install区块，定义如何安装这个配置文件，即怎样做到开机启动。\nWantedBy字段：表示该服务所在的 Target。\nTarget的含义是服务组，表示一组服务。WantedBy=multi-user.target指的是，sshd所在的 Target 是multi-user.target。\n这个设置非常重要，因为执行systemctl enable sshd.service命令时，sshd.service的一个符号链接，就会放在/etc/systemd/system目录下面的multi-user.target.wants子目录之中。\nSystemd 有默认的启动 Target。\n$ systemctl get-default\nmulti-user.target\n\n上面的结果表示，默认的启动 Target 是multi-user.target。在这个组里的所有服务，都将开机启动。这就是为什么systemctl enable命令能设置开机启动的原因。\n使用 Target 的时候，systemctl list-dependencies命令和systemctl isolate命令也很有用。\n# 查看 multi-user.target 包含的所有服务\n$ systemctl list-dependencies multi-user.target\n\n# 切换到另一个 target\n# shutdown.target 就是关机状态\n$ sudo systemctl isolate shutdown.target\n\n一般来说，常用的 Target 有两个：一个是multi-user.target，表示多用户命令行状态；另一个是graphical.target，表示图形用户状态，它依赖于multi-user.target。官方文档有一张非常清晰的Target 依赖关系图。\n8.8. Target 的配置文件Target 也有自己的配置文件。\n$ systemctl cat multi-user.target\n\n[Unit]\nDescription&#x3D;Multi-User System\nDocumentation&#x3D;man:systemd.special(7)\nRequires&#x3D;basic.target\nConflicts&#x3D;rescue.service rescue.target\nAfter&#x3D;basic.target rescue.service rescue.target\nAllowIsolate&#x3D;yes\n\n注意，Target 配置文件里面没有启动命令。\n上面输出结果中，主要字段含义如下。\n\nRequires字段：要求basic.target一起运行。\nConflicts字段：冲突字段。如果rescue.service或rescue.target正在运行，multi-user.target就不能运行，反之亦然。\nAfter：表示multi-user.target在basic.target 、 rescue.service、rescue.target之后启动，如果它们有启动的话。\nAllowIsolate：允许使用systemctl isolate命令切换到multi-user.target。\n\n8.9. 修改配置文件后重启修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。\n# 重新加载配置文件\n$ sudo systemctl daemon-reload\n\n# 重启相关服务\n$ sudo systemctl restart foobar\n\n9. 参考资料\nSystemd 入门教程：命令篇\nSystemd 入门教程：实战篇\n\n","tags":["linux","Systemd"]},{"title":"teamspeak教程","url":"/2022/02/19/teamspeak/","content":"teamspeak3 教程+汉化 (偷懒整理的链接)我的服务器地址ts3.saint1337.top\n点我一键加入服务器(确保已经正确安装客户端)\n官网下载链接https://www.teamspeak.com/zh-CN/downloads/\n\n整合包链接http://mtw.so/60CuQh 访问密码:woshishabi\n汉化插件链接\nVigorous Pro提供的中文语言包\n\nhttps://ts.wevg.org/translation-zh-CN/\n\n\nAceSheep提供的中文语言包 (我现在用的)\n\nhttps://blog.acesheep.com/index.php/archives/1242/\n\n使用教程\nVigorous Pro给的教程很全面 推荐参考\n\n​       https://www.wevg.org/archives/how-to-use-teamspeak3/\n\n不要使用Overwolf 会有性能问题\n\nmyTeamSpeak登录会有网路问题 推荐使用本地身份保存信息\n\n\n1.工具–身份  \n2.右键你想要导出的身份(右键空白也可以创建身份) 重命名后保存\n\n3.命名导出的ini配置文件并保存好\n其他功能请自行探索 使用愉快 以上","tags":["teamspeak","teamspeak3"]},{"title":"解决 wg-quick 报错resolvconf: command not found","url":"/2023/11/28/wg-quick%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0resolvconf/","content":"当前环境\nLinux armbian 5.15.139-ophub #1 SMP PREEMPT Mon Nov 20 22:33:18 EST 2023 aarch64 aarch64 aarch64 GNU/Linux                                 \n使用的软件源 Ubuntu Ports 23.04 luner\n\n问题详情root@armbian:&#x2F;etc&#x2F;wireguard# sudo wg-quick up wg0\n[#] ip link add wg0 type wireguard\n[#] wg setconf wg0 &#x2F;dev&#x2F;fd&#x2F;63\n[#] ip -4 address add 10.0.8.9&#x2F;24 dev wg0\n[#] ip link set mtu 1420 up dev wg0\n[#] resolvconf -a wg0 -m 0 -x\n&#x2F;usr&#x2F;bin&#x2F;wg-quick: line 32: resolvconf: command not found\n[#] ip link delete dev wg0\n\n\n\n解决步骤问题是由无法调用 resolvconf命令产生的 我们通过直接安装来解决 不同发行版的软件包可能不同\nroot@armbian:&#x2F;etc&#x2F;wireguard# sudo apt install openresolv\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nPackage openresolv is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n\nE: Package &#39;openresolv&#39; has no installation candidate\nroot@armbian:&#x2F;etc&#x2F;wireguard# resolvconf\nCommand &#39;resolvconf&#39; not found, but can be installed with:\napt install systemd-resolved\nroot@armbian:&#x2F;etc&#x2F;wireguard# apt install systemd-resolved\n\n...succeed\n\nroot@armbian:&#x2F;etc&#x2F;wireguard# systemctl start wg-quick@wg0\n\n"},{"title":"wsl2+宿主机v2rayN 实现命令行proxy","url":"/2023/04/13/wsl-debian-proxy/","content":"环境\nv2rayn version 5.39\nwsl2 + Debian\n\nv2rayN 设置局域网 socks5 &#x2F; http proxy\ncore:基础设置中勾选允许来自局域网的连接和开启 Mux 多路复用 ( 推荐设置认证密码 )\n在选择节点窗口下方查看共享给局域网的端口\n\n查看宿主机的 ip 和 wsl 的 ip\n获取宿主机 ip cat /etc/resolv.conf\n\n同时添加代理到 /etc/environment ~/.profile\n也可以添加到 ~/.bashrc ~/.zshrc\n\n\n### http代理\n\nexport windows_host&#x3D;&#96;cat &#x2F;etc&#x2F;resolv.conf|grep nameserver|awk &#39;&#123;print $2&#125;&#39;&#96;\nexport ALL_PROXY&#x3D;socks5:&#x2F;&#x2F;&#123;username&#125;:&#123;passwd&#125;@$windows_host:&#123;port&#125;\nexport HTTP_PROXY&#x3D;$ALL_PROXY\nexport http_proxy&#x3D;$ALL_PROXY\nexport HTTPS_PROXY&#x3D;$ALL_PROXY\nexport https_proxy&#x3D;$ALL_PROXY\nexport no_proxy&#x3D;127.0.0.1,.devops.com,localhost,local,.local,172.28.0.0&#x2F;16\n\nif [ &quot;&#96;git config --global --get proxy.https&#96;&quot; !&#x3D; &quot;socks5:&#x2F;&#x2F;&#123;username&#125;:&#123;passwd&#125;@$windows_host:&#123;port&#125;&quot; ]; then\n            git config --global proxy.https socks5:&#x2F;&#x2F;&#123;username&#125;:&#123;passwd&#125;@$windows_host:&#123;port&#125;\nfi\n\n\n\nsource /etc/environment&amp;&amp;source ~/.profile\n\n测试连接\nwget google.com\n\ncurl google.com\n\n有返回值说明正常\n\n\n"},{"title":"System has not been booted with systemd as init system (PID 1).","url":"/2023/04/20/wsl-fix-systemd-issue/","content":"升级 wsl\n注意开启 windows update\nwsl --update\nwsl --versionWSL version: 1.1.3.0\nKernel version: 5.15.90.1\nWSLg version: 1.0.49\nMSRDC version: 1.2.3770\nDirect3D version: 1.608.2-61064218\nDXCore version: 10.0.25131.1002-220531-1700.rs-onecore-base2-hyp\nWindows version: 10.0.22621.525\n\n开启 Systemd support\nsudo nano /etc/wsl.conf\n  [boot]\nsystemd&#x3D;true\n\n^O + ^X\n\nwsl --shutdown\n\n\nEnjoy !"},{"title":"使用 column 工具格式化文本输出","url":"/2025/01/10/%E4%BD%BF%E7%94%A8column-%E5%B7%A5%E5%85%B7%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%96%87%E6%9C%AC%E8%BE%93%E5%87%BA/","content":"关于 column在Linux中查看数据文本时总会出现可读性低的问题（比如 /etc/passwd），本文将介绍一个非常实用的工具叫做 column，它可以帮助我们将文本数据以整齐的列格式输出。\ncolumn 命令来自包含大量工具的软件包 util-linux，其中的工具涵盖了系统管理、文件操作以及硬件监控多个方面。\n\n\n基本用法column 命令的基本语法如下：\ncolumn [options] [file ...]\n\n如果没有指定文件，column 会从标准输入（管道符、重定向、直接键盘输入）读取数据。\noptions:\n\n-J: 此选项指定系统以 JSON 格式显示输出。\n-c: 根据每行允许的总字符数定义输出的宽度。\n-d: 用于定义不打印标题行。\n-N: 定义列名，每个名称用逗号（“,”）分隔。\n-H: 用于隐藏指定的列，使其不显示。\n-V: 显示版本信息并退出。\n-h: 显示帮助信息并退出。\n-s: 定义输出的列分隔符。\n-t: 用于通过确定列数来创建表格。\n-R: 用于将特定列中的文本右对齐。\n-T: 允许系统在必要时截断文本，以便调整列宽，确保列不会变得过宽。\n-O: 允许用户定义列的显示顺序。\n-L: 在每行后插入空行。\n\n示例/etc/passwd 文件是一个包含用户账户信息的系统文件，通常每行的格式如下：\nusername:x:UID:GID:comment:home_directory:shell\n\n这里的 x 表示加密后的密码已经被存储在 /etc/shadow 中。\n我们可以使用 column 命令来格式化 /etc/passwd 文件的内容，使其更易读。\n\n示例1 格式化输出 设定分隔符为:\n$ column -t -s: &#x2F;etc&#x2F;passwd\nroot             x  0      0      root                        &#x2F;root              &#x2F;bin&#x2F;bash\ndaemon           x  1      1      daemon                      &#x2F;usr&#x2F;sbin          &#x2F;usr&#x2F;sbin&#x2F;nologin\nbin              x  2      2      bin                         &#x2F;bin               &#x2F;usr&#x2F;sbin&#x2F;nologin\nsys              x  3      3      sys                         &#x2F;dev               &#x2F;usr&#x2F;sbin&#x2F;nologin\nsync             x  4      65534  sync                        &#x2F;bin               &#x2F;bin&#x2F;sync\ngames            x  5      60     games                       &#x2F;usr&#x2F;games         &#x2F;usr&#x2F;sbin&#x2F;nologin\n\n示例2 隐藏特定的列\n$ column -t -s: -H 2,4,5,7 &#x2F;etc&#x2F;passwd\nroot             0      &#x2F;root\ndaemon           1      &#x2F;usr&#x2F;sbin\nbin              2      &#x2F;bin\nsys              3      &#x2F;dev\nsync             4      &#x2F;bin\ngames            5      &#x2F;usr&#x2F;games\n\n示例3 自定义列名\n$ column -t -s: -N &quot;Username,Password,UID,GID,Comment,Home,Shell&quot; &#x2F;etc&#x2F;passwd\nUsername         Password  UID    GID    Comment                     Home               Shell\nroot             x         0      0      root                        &#x2F;root              &#x2F;bin&#x2F;bash\ndaemon           x         1      1      daemon                      &#x2F;usr&#x2F;sbin          &#x2F;usr&#x2F;sbin&#x2F;nologin\nbin              x         2      2      bin                         &#x2F;bin               &#x2F;usr&#x2F;sbin&#x2F;nologin\nsys              x         3      3      sys                         &#x2F;dev               &#x2F;usr&#x2F;sbin&#x2F;nologin\nsync             x         4      65534  sync                        &#x2F;bin               &#x2F;bin&#x2F;sync\ngames            x         5      60     games                       &#x2F;usr&#x2F;games         &#x2F;usr&#x2F;sbin&#x2F;nologin\n\n示例4 指定特定列的顺序 \n# 效果同 -O &quot;7,1&quot;\n$ column -t -s: -O &quot;7,1,2,3,4,5&quot; -N &quot;Username,Password,UID,GID,Comment,Home,Shell&quot; &#x2F;etc&#x2F;passwd\nShell              Username         Password  UID    GID    Comment                     Home\n&#x2F;bin&#x2F;bash          root             x         0      0      root                        &#x2F;root\n&#x2F;usr&#x2F;sbin&#x2F;nologin  daemon           x         1      1      daemon                      &#x2F;usr&#x2F;sbin\n&#x2F;usr&#x2F;sbin&#x2F;nologin  bin              x         2      2      bin                         &#x2F;bin\n&#x2F;usr&#x2F;sbin&#x2F;nologin  sys              x         3      3      sys                         &#x2F;dev\n&#x2F;bin&#x2F;sync          sync             x         4      65534  sync                        &#x2F;bin\n&#x2F;usr&#x2F;sbin&#x2F;nologin  games            x         5      60     games                       &#x2F;usr&#x2F;games\n\n"},{"title":"使用Reqable和算法助手简单逆向有道翻译官查词接口（上）","url":"/2025/08/31/%E4%BD%BF%E7%94%A8reqable%E5%92%8C%E7%AE%97%E6%B3%95%E5%8A%A9%E6%89%8B%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%E5%AE%98%E6%9F%A5%E8%AF%8D%E6%8E%A5%E5%8F%A3%EF%BC%88%E4%B8%8A%EF%BC%89/","content":"准备环境有 Root 环境的安卓手机或模拟器一台，需要安装 LSPosed 框架。\n安装算法助手并授予 Root 权限，并在 LSPosed 中勾选需要捕获的 APP。\n\n\n\n在算法助手中勾选需要捕获的 APP 和需要分析的算法。\n\n以上我们的算法助手就设置完了，下面开始设置 Reqable。\n根据 Reqable 的提示我们扫码把手机和电脑设置协同，使用 Magisk 模块安装证书后根据提示重启。\n打开 Reqable 并连接上电脑，再打开有道翻译官进行查词，这里以单词 dog 为例。\n\n分析 HTTP 请求右键这个请求可以复制 curl 命令，这里我们把这个 curl 命令交给 Deepseek 并让他帮我们拆解出全部参数。\nimport requests\nimport time\n\nurl &#x3D; &quot;https:&#x2F;&#x2F;fanyiguan-api.youdao.com&#x2F;search_s&quot;\n\nparams &#x3D; &#123;\n    &quot;q&quot;: &quot;dog&quot;,\n    &quot;from&quot;: &quot;en&quot;,\n    &quot;to&quot;: &quot;zh-CHS&quot;,\n    &quot;userLabel&quot;: &quot;LEARNER, HIGHSCHOOL, IELTS&quot;,\n    &quot;lecheck&quot;: &quot;true&quot;,\n    &quot;dev_name&quot;: &quot;Redmi Note 8 Pro&quot;,\n    &quot;product&quot;: &quot;fanyiguan&quot;,\n    &quot;appVersion&quot;: &quot;4.2.2&quot;,\n    &quot;keyfrom&quot;: &quot;fanyi.4.2.2.android&quot;,\n    &quot;mid&quot;: &quot;11&quot;,\n    &quot;screen&quot;: &quot;1080x2340&quot;,\n    &quot;network&quot;: &quot;wifi&quot;,\n    &quot;abtest&quot;: &quot;9&quot;,\n    &quot;yduuid&quot;: &quot;5d41d9c2ca51d193&quot;,\n    &quot;vendor&quot;: &quot;vivo&quot;,\n    &quot;client&quot;: &quot;android&quot;,\n    &quot;imei&quot;: &quot;CQljODMzNGE3ZTMzYjM4NmMyCXVua25vd24&#x3D;&quot;,\n    &quot;model&quot;: &quot;Mi_10&quot;,\n    &quot;oaid&quot;: &quot;5d41d9c2ca51d193&quot;,\n    &quot;pointParam&quot;: &quot;userLabel,dev_name,product,appVersion,keyfrom,mid,screen,keyid,mysticTime,network,q,lecheck,abtest,yduuid,vendor,client,imei,from,model,to,oaid&quot;,\n    &quot;sign&quot;: &quot;b61237da3b7e82f1f15c804188ac9644&quot;, # 签名校验\n    &quot;mysticTime&quot;: &quot;1756639283092&quot;,  # 使用当前时间戳\n    &quot;keyid&quot;: &quot;fyg_trans_key&quot;\n&#125;\n\nheaders &#x3D; &#123;\n    &quot;User-Agent&quot;: &quot;okhttp&#x2F;5.0.0-alpha.14&quot;,\n    &quot;Connection&quot;: &quot;Keep-Alive&quot;,\n    &quot;Accept-Encoding&quot;: &quot;gzip&quot;,\n    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;utf-8&quot;\n&#125;\n\ndata &#x3D; &#123;\n    &quot;dicts&quot;: &#39;&#123;&quot;count&quot;:69,&quot;dicts&quot;:[[&quot;ct&quot;],[&quot;tc&quot;],[&quot;ec&quot;],[&quot;ce&quot;],[&quot;newjc&quot;],[&quot;newcj&quot;],[&quot;yd_cj&quot;],[&quot;yd_jc&quot;],[&quot;newcj_sents&quot;],[&quot;jtj&quot;],[&quot;ck&quot;],[&quot;kc&quot;],[&quot;cf&quot;],[&quot;fc&quot;],[&quot;multle&quot;],[&quot;longman&quot;],[&quot;newcenturyfc&quot;],[&quot;collins&quot;],[&quot;ec21&quot;],[&quot;exam_dict&quot;],[&quot;ee&quot;],[&quot;hh&quot;],[&quot;newhh&quot;],[&quot;ce_new&quot;],[&quot;special&quot;],[&quot;web_trans&quot;],[&quot;pic_dict&quot;],[&quot;word_video&quot;],[&quot;rel_word&quot;],[&quot;phrs&quot;],[&quot;syno&quot;],[&quot;wordform&quot;],[&quot;ywAncientWord&quot;],[&quot;ywBasic&quot;],[&quot;ywRelatedWords&quot;],[&quot;ywWordNet&quot;],[&quot;ywIdiom&quot;],[&quot;ywSynAndAnt&quot;],[&quot;blng_sents_part&quot;],[&quot;auth_sents_part&quot;],[&quot;media_sents_part&quot;],[&quot;baike&quot;],[&quot;etym&quot;],[&quot;wikipedia_digest&quot;],[&quot;typos&quot;],[&quot;web_search&quot;],[&quot;fanyi&quot;],[&quot;tcb&quot;],[&quot;ctc&quot;],[&quot;ugc&quot;],[&quot;oxfordAdvance&quot;],[&quot;huge_ec&quot;],[&quot;huge_ce&quot;],[&quot;newcenturyjc&quot;],[&quot;oxford&quot;],[&quot;webster&quot;],[&quot;special_economy&quot;],[&quot;special_medicine&quot;],[&quot;special_elec_commu_auto_control&quot;],[&quot;special_mechanical&quot;],[&quot;special_energy&quot;],[&quot;special_biology&quot;],[&quot;special_traffic&quot;],[&quot;special_computer&quot;],[&quot;special_other&quot;],[&quot;video_sents&quot;],[&quot;longchao-ck&quot;],[&quot;longchao-kc&quot;],[&quot;individual&quot;]]&#125;&#39;\n&#125;\n\nresponse &#x3D; requests.post(\n    url&#x3D;url,\n    params&#x3D;params,\n    headers&#x3D;headers,\n    data&#x3D;data\n)\n\nprint(f&quot;Status Code: &#123;response.status_code&#125;&quot;)\nprint(f&quot;Response: &#123;response.text&#125;&quot;)\n\n请求头和请求体中没有看出什么特别的，所以我们详细分析 query strings 也就是 URL parameters 的部分。\n这里的 yduuid 和 oaid 一模一样，推测是用户id标识。\nsign 推测是反爬校验的参数，更改q之后重新发送请求果然无法获取到数据。\n&#123;\n  &quot;code&quot;: 403,\n  &quot;msg&quot;: &quot;Permission Denied&quot;\n&#125;\n\n这时我们打开算法助手，找到有道翻译官的日志搜索b61237da3b7e82f1f15c804188ac9644这个值。\n\nabtest&#x3D;9&amp;appVersion&#x3D;4.2.2&amp;client&#x3D;android&amp;dev_name&#x3D;Redmi Note 8 Pro&amp;from&#x3D;en&amp;imei&#x3D;CQljODMzNGE3ZTMzYjM4NmMyCXVua25vd24%3D&amp;keyfrom&#x3D;fanyi.4.2.2.android&amp;keyid&#x3D;fyg_trans_key&amp;lecheck&#x3D;true&amp;mid&#x3D;11&amp;model&#x3D;Mi_10&amp;mysticTime&#x3D;1756639283092&amp;network&#x3D;wifi&amp;oaid&#x3D;5d41d9c2ca51d193&amp;product&#x3D;fanyiguan&amp;q&#x3D;dog&amp;screen&#x3D;1080x2340&amp;to&#x3D;zh-CHS&amp;userLabel&#x3D;LEARNER, HIGHSCHOOL, IELTS&amp;vendor&#x3D;vivo&amp;yduuid&#x3D;5d41d9c2ca51d193&amp;key&#x3D;gj6TNi1SC5igmZlVSFgyX1lxSrtAQlcr\n\n可以看出b61237da3b7e82f1f15c804188ac9644是一个 MD5 算法摘要后的值，上面这一段就是摘要前的值。很明显其中大部分都出现在请求的 URL 查询参数中，除了一个key。\n按照上面的方法，重新发送请求后查看算法助手的日志发现这个用来组成字符串的key参数是固定的，我推测服务端应该也存储有对应的imei或者yduuid和相对应的这个key来生成同样的 MD5 摘要进行校验，所以保留这个key用来生成我们自己的sign。\n实现代码import requests\nimport time\nimport hashlib\nimport ssl\nimport urllib3\nimport json\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nclass YouDaoTranslator:\n    def __init__(self):\n        self.secret_key &#x3D; &#39;gj6TNi1SC5igmZlVSFgyX1lxSrtAQlcr&#39;\n        self.base_params &#x3D; &#123;\n            &#39;abtest&#39;: &#39;9&#39;,\n            &#39;appVersion&#39;: &#39;4.2.2&#39;,\n            &#39;client&#39;: &#39;android&#39;,\n            &#39;dev_name&#39;: &#39;Redmi Note 8 Pro&#39;,\n            &#39;imei&#39;: &#39;CQljODMzNGE3ZTMzYjM4NmMyCXVua25vd24%3D&#39;,\n            &#39;keyfrom&#39;: &#39;fanyi.4.2.2.android&#39;,\n            &#39;keyid&#39;: &#39;fyg_trans_key&#39;,\n            &#39;lecheck&#39;: &#39;true&#39;,\n            &#39;mid&#39;: &#39;11&#39;,\n            &#39;model&#39;: &#39;Mi_10&#39;,\n            &#39;network&#39;: &#39;wifi&#39;,\n            &#39;oaid&#39;: &#39;5d41d9c2ca51d193&#39;,\n            &#39;product&#39;: &#39;fanyiguan&#39;,\n            &#39;screen&#39;: &#39;1080x2340&#39;,\n            &#39;vendor&#39;: &#39;vivo&#39;,\n            &#39;yduuid&#39;: &#39;5d41d9c2ca51d193&#39;\n        &#125;\n        self.param_order &#x3D; [\n            &#39;abtest&#39;, &#39;appVersion&#39;, &#39;client&#39;, &#39;dev_name&#39;, &#39;from&#39;, &#39;imei&#39;,\n            &#39;keyfrom&#39;, &#39;keyid&#39;, &#39;lecheck&#39;, &#39;mid&#39;, &#39;model&#39;, &#39;mysticTime&#39;,\n            &#39;network&#39;, &#39;oaid&#39;, &#39;product&#39;, &#39;q&#39;, &#39;screen&#39;, &#39;to&#39;, &#39;vendor&#39;, &#39;yduuid&#39;\n        ]\n    \n    def generate_sign(self, q_text, from_lang, to_lang):\n        print(&quot;\\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; generate_sign 函数开始 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;)\n        print(f&quot;输入参数: 文本&#x3D;&#39;&#123;q_text&#125;&#39;, 源语言&#x3D;&#39;&#123;from_lang&#125;&#39;, 目标语言&#x3D;&#39;&#123;to_lang&#125;&#39;&quot;)\n        \n        params &#x3D; self.base_params.copy()\n        params.update(&#123;\n            &#39;q&#39;: q_text,\n            &#39;from&#39;: from_lang,\n            &#39;to&#39;: to_lang,\n            &#39;mysticTime&#39;: str(int(time.time() * 1000))\n        &#125;)\n        print(f&quot;添加翻译参数后的完整参数: &#123;json.dumps(params, ensure_ascii&#x3D;False, indent&#x3D;2)&#125;&quot;)\n        print(f&quot;当前时间戳(mysticTime): &#123;params[&#39;mysticTime&#39;]&#125;&quot;)\n        \n        sign_parts &#x3D; []\n        for key in self.param_order:\n            if key in params:\n                sign_parts.append(f&quot;&#123;key&#125;&#x3D;&#123;params[key]&#125;&quot;)\n                print(f&quot;添加参数到签名: &#123;key&#125;&#x3D;&#123;params[key]&#125;&quot;)\n        \n        sign_str &#x3D; &#39;&amp;&#39;.join(sign_parts) + f&#39;&amp;key&#x3D;&#123;self.secret_key&#125;&#39;\n        print(f&quot;签名字符串(sign_str): &#123;sign_str&#125;&quot;)\n        \n        sign &#x3D; hashlib.md5(sign_str.encode(&#39;utf-8&#39;)).hexdigest()\n        print(f&quot;MD5签名结果(sign): &#123;sign&#125;&quot;)\n        print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; generate_sign 函数结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\\n&quot;)\n        \n        return params, sign\n    \n    def translate(self, text, from_lang&#x3D;&#39;en&#39;, to_lang&#x3D;&#39;zh-CHS&#39;):\n        params, sign &#x3D; self.generate_sign(text, from_lang, to_lang)\n        \n        url &#x3D; &#39;https:&#x2F;&#x2F;fanyiguan-api.youdao.com&#x2F;search_s&#39;\n        \n        request_params &#x3D; params.copy()\n        request_params[&#39;sign&#39;] &#x3D; sign\n        request_params[&#39;mysticTime&#39;] &#x3D; params[&#39;mysticTime&#39;]\n        request_params[&#39;pointParam&#39;] &#x3D; &#39;dev_name,product,appVersion,keyfrom,mid,screen,keyid,mysticTime,network,q,lecheck,abtest,yduuid,vendor,client,imei,from,model,to,oaid&#39;\n        \n        headers &#x3D; &#123;\n            &#39;User-Agent&#39;: &#39;okhttp&#x2F;5.0.0-alpha.14&#39;,\n            &#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded; charset&#x3D;utf-8&#39;,\n        &#125;\n        \n        data &#x3D; &#123;\n            &#39;dicts&#39;: &#39;&#123;&quot;count&quot;:69,&quot;dicts&quot;:[[&quot;ct&quot;],[&quot;tc&quot;],[&quot;ec&quot;],[&quot;ce&quot;],[&quot;newjc&quot;],[&quot;newcj&quot;],[&quot;yd_cj&quot;],[&quot;yd_jc&quot;],[&quot;newcj_sents&quot;],[&quot;jtj&quot;],[&quot;ck&quot;],[&quot;kc&quot;],[&quot;cf&quot;],[&quot;fc&quot;],[&quot;multle&quot;],[&quot;longman&quot;],[&quot;newcenturyfc&quot;],[&quot;collins&quot;],[&quot;ec21&quot;],[&quot;exam_dict&quot;],[&quot;ee&quot;],[&quot;hh&quot;],[&quot;newhh&quot;],[&quot;ce_new&quot;],[&quot;special&quot;],[&quot;web_trans&quot;],[&quot;pic_dict&quot;],[&quot;word_video&quot;],[&quot;rel_word&quot;],[&quot;phrs&quot;],[&quot;syno&quot;],[&quot;wordform&quot;],[&quot;ywAncientWord&quot;],[&quot;ywBasic&quot;],[&quot;ywRelatedWords&quot;],[&quot;ywWordNet&quot;],[&quot;ywIdiom&quot;],[&quot;ywSynAndAnt&quot;],[&quot;blng_sents_part&quot;],[&quot;auth_sents_part&quot;],[&quot;media_sents_part&quot;],[&quot;baike&quot;],[&quot;etym&quot;],[&quot;wikipedia_digest&quot;],[&quot;typos&quot;],[&quot;web_search&quot;],[&quot;fanyi&quot;],[&quot;tcb&quot;],[&quot;ctc&quot;],[&quot;ugc&quot;],[&quot;oxfordAdvance&quot;],[&quot;huge_ec&quot;],[&quot;huge_ce&quot;],[&quot;newcenturyjc&quot;],[&quot;oxford&quot;],[&quot;webster&quot;],[&quot;special_economy&quot;],[&quot;special_medicine&quot;],[&quot;special_elec_commu_auto_control&quot;],[&quot;special_mechanical&quot;],[&quot;special_energy&quot;],[&quot;special_biology&quot;],[&quot;special_traffic&quot;],[&quot;special_computer&quot;],[&quot;special_other&quot;],[&quot;video_sents&quot;],[&quot;longchao-ck&quot;],[&quot;longchao-kc&quot;],[&quot;individual&quot;]]&#125;&#39;\n        &#125;\n        \n        # 添加 verify&#x3D;False 来禁用SSL验证\n        response &#x3D; requests.post(\n            url&#x3D;url,\n            params&#x3D;request_params,\n            headers&#x3D;headers,\n            data&#x3D;data,\n            verify&#x3D;False  # 禁用SSL验证\n        )\n        \n        return response.json()\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    translator &#x3D; YouDaoTranslator()\n    try:\n        print(&quot;开始翻译单词 &#39;dog&#39;...&quot;)\n        result &#x3D; translator.translate(&quot;dog&quot;)\n        # 将翻译结果保存到json文件\n        with open(&#39;translation_result.json&#39;, &#39;w&#39;, encoding&#x3D;&#39;utf-8&#39;) as f:\n            json.dump(result, f, ensure_ascii&#x3D;False, indent&#x3D;4)\n        print(&quot;翻译结果已保存到 translation_result.json&quot;)\n    except Exception as e:\n        print(&quot;错误:&quot;, e)\n\n这里我们查看保存的 json 文件后发现仍有几个数据是加密的，比如&quot;webster&quot;对象中的&quot;encryptedData&quot;和&quot;oxfordAdvance&quot;中的&quot;encryptedData&quot;。下篇中会继续使用算法助手解密韦氏词典和牛津高阶词典数据。\n"},{"title":"使用reqable和算法助手简单逆向有道翻译官查词接口（下）","url":"/2025/09/01/%E4%BD%BF%E7%94%A8reqable%E5%92%8C%E7%AE%97%E6%B3%95%E5%8A%A9%E6%89%8B%E7%AE%80%E5%8D%95%E9%80%86%E5%90%91%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91%E5%AE%98%E6%9F%A5%E8%AF%8D%E6%8E%A5%E5%8F%A3%EF%BC%88%E4%B8%8B%EF%BC%89/","content":"前情提要书接上回，在上篇中我们使用算法助手找出了查词请求中的sign参数的合成方法。在返回的内容中还有几个&quot;encryptedData&quot;没能解密，我们在下篇中来解决他。\n\n\n在算法助手日志中搜索\n在算法助手日志中搜索&quot;encryptedData&quot;中的值（Base64），可以看到我们可以找到这个Base64解密的过程使用的算法是 AES/CBC/PKCS5Padding。BTW，我不懂密码学，有疑问具体请参考What is the difference between PKCS#5 padding and PKCS#7 padding 和 AES&#x2F;CBC&#x2F;PKCS5Padding vs AES&#x2F;CBC&#x2F;PKCS7Padding with 256 key size performance java 。\n仔细观察后发现算法助手中使用的Base64文本和我们在json中接收的有点区别，使用的是Base 64 Encoding with URL and Filename Safe Alphabet。简单来说就是+被替换为了-，/被替换为了_，详见 RFC 4648。\n在有道翻译官中尝试比对多个查词操作后发现，密钥和 IV 都不会改变。\n使用python复现解密操作# Crypto 不是标准库，安装和使用请看：https:&#x2F;&#x2F;pycryptodome.readthedocs.io&#x2F;en&#x2F;latest&#x2F;src&#x2F;introduction.html\n\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\nimport base64\n\ndef decrypt_aes_cbc(key_b64, iv_b64, ciphertext_b64):\n    &quot;&quot;&quot;\n    使用 AES&#x2F;CBC&#x2F;PKCS5Padding 模式解密数据.\n\n    参数:\n        key_b64 (str): Base64 编码的密钥.\n        iv_b64 (str): Base64 编码的初始化向量 (IV).\n        ciphertext_b64 (str): Base64 编码的密文.\n\n    返回:\n        str: 解密后的 UTF-8 字符串，如果失败则返回错误信息.\n    &quot;&quot;&quot;\n    try:\n        # 1. 将 Base64 编码的输入解码为字节\n        key &#x3D; base64.b64decode(key_b64)\n        iv &#x3D; base64.b64decode(iv_b64)\n        ciphertext &#x3D; base64.b64decode(ciphertext_b64)\n\n        # 2. 创建一个 AES 密码器对象\n        # 模式为 CBC (Cipher Block Chaining)\n        cipher &#x3D; AES.new(key, AES.MODE_CBC, iv)\n\n        # 3. 解密数据并移除填充\n        # pycryptodome 使用 PKCS7 填充，它是 PKCS5 填充的超集，完全兼容\n        decrypted_padded &#x3D; cipher.decrypt(ciphertext)\n        decrypted_plaintext_bytes &#x3D; unpad(decrypted_padded, AES.block_size)\n\n        # 4. 将解密的字节解码为 UTF-8 字符串\n        return decrypted_plaintext_bytes.decode(&#39;utf-8&#39;)\n\n    except (ValueError, KeyError) as e:\n        return f&quot;解密失败，请检查密钥、IV或密文是否正确。错误: &#123;e&#125;&quot;\n    except Exception as e:\n        return f&quot;发生未知错误: &#123;e&#125;&quot;\n\n# --- 主程序入口 ---\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    # ▼▼▼ 请在此处填入你的 Base64 编码的密钥、IV 和密文 ▼▼▼\n\n    key_base64 &#x3D; &quot;OzcwEYSQqe5xtvlXFHDCzw&#x3D;&#x3D;&quot;  # 密钥 (Key)\n    iv_base64 &#x3D; &quot;jTdFyls45vdv1QF2aPiRHA&#x3D;&#x3D;&quot;   # IV (Initialization Vector)\n    ciphertext_base64 &#x3D; &quot;&#x3D;&#x3D;&quot;\n\n    # 进行替换操作\n    ciphertext_base64 &#x3D; ciphertext_base64.replace(&#39;-&#39;, &#39;+&#39;)\n    ciphertext_base64 &#x3D; ciphertext_base64.replace(&#39;_&#39;, &#39;&#x2F;&#39;)\n\n    print(ciphertext_base64)\n\n    # 检查用户是否已填入数据\n    if not key_base64 or not iv_base64 or not ciphertext_base64:\n        print(&quot;❌ 脚本未运行。请先在代码中填入 key_base64, iv_base64, 和 ciphertext_base64 的值。&quot;)\n    else:\n        # 调用解密函数\n        decrypted_result &#x3D; decrypt_aes_cbc(key_base64, iv_base64, ciphertext_base64)\n\n        # 打印结果\n        print(&quot;--- 解密结果 ---&quot;)\n        print(decrypted_result)\n\n"},{"title":"使用个人用户免费的ubuntu-pro","url":"/2024/07/02/%E4%BD%BF%E7%94%A8%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E5%85%8D%E8%B4%B9%E7%9A%84ubuntu-pro/","content":"前言Ubuntu发行版的终端广告（Bug #1950692）和snap（Mint Blog中的观点）一直是令人诟病的内容，也是我切换到Debian的原因。\n但是，今天还是要注册一下Ubuntu Pro，毕竟还有一些以前安装的机器在运行着已经EOL的Ubuntu版本，需要安装一些安全补丁。\n\n\n操作打开Ubuntu Pro的网站 https://ubuntu.com/pro\n点击Get Ubuntu Pro now并选择Myself，点击Register登录帐号确认。\n获取Token，复制下面的命令。\n\n这里以**Ubuntu 18.04 LTS (Bionic Beaver)**为例：\nroot@ecs-a2nGQ:~# pro version\n32.3~18.04\n\n如果不存在pro 命令，使用 sudo apt update &amp;&amp; sudo apt install ubuntu-advantage-tools安装。\nroot@ecs-a2nGQ:~# sudo pro attach &#123;token&#125;\nEnabling Ubuntu Pro: ESM Apps\nUbuntu Pro: ESM Apps enabled\nEnabling Ubuntu Pro: ESM Infra\nUbuntu Pro: ESM Infra enabled\nEnabling Livepatch\nLivepatch enabled\nThis machine is now attached to &#39;Ubuntu Pro - free personal subscription&#39;\n\nSERVICE          ENTITLED  STATUS       DESCRIPTION\ncc-eal           yes       disabled     Common Criteria EAL2 Provisioning Packages\ncis              yes       disabled     Security compliance and audit tools\nesm-apps         yes       enabled      Expanded Security Maintenance for Applications\nesm-infra        yes       enabled      Expanded Security Maintenance for Infrastructure\nfips             yes       disabled     NIST-certified FIPS crypto packages\nfips-updates     yes       disabled     FIPS compliant crypto packages with stable security updates\nlivepatch        yes       enabled      Canonical Livepatch service\nros              yes       disabled     Security Updates for the Robot Operating System\nros-updates      yes       disabled     All Updates for the Robot Operating System\n\nNOTICES\nOperation in progress: pro attach\n\nFor a list of all Ubuntu Pro services, run &#39;pro status --all&#39;\nEnable services with: pro enable &lt;service&gt;\n\n     Account: &#123;you_email_address&#125;\nSubscription: Ubuntu Pro - free personal subscription\nroot@ecs-a2nGQ:~# apt update\nHit:1 http:&#x2F;&#x2F;security.ubuntu.com&#x2F;ubuntu bionic-security InRelease\nHit:2 http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu bionic InRelease                 \nHit:3 http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu bionic-updates InRelease         \nHit:4 http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu bionic-backports InRelease                                \nHit:5 https:&#x2F;&#x2F;esm.ubuntu.com&#x2F;apps&#x2F;ubuntu bionic-apps-security InRelease                          \nHit:6 https:&#x2F;&#x2F;esm.ubuntu.com&#x2F;apps&#x2F;ubuntu bionic-apps-updates InRelease\nHit:7 https:&#x2F;&#x2F;esm.ubuntu.com&#x2F;infra&#x2F;ubuntu bionic-infra-security InRelease\nHit:8 https:&#x2F;&#x2F;esm.ubuntu.com&#x2F;infra&#x2F;ubuntu bionic-infra-updates InRelease\nReading package lists... Done                     \nBuilding dependency tree       \nReading state information... Done\n123 packages can be upgraded. Run &#39;apt list --upgradable&#39; to see them.\nroot@ecs-a2nGQ:~# \n\nupgrade 之后重启机器，完成更新。\n"},{"title":"关于在数据库中存储用户密码和验证","url":"/2024/09/24/%E5%85%B3%E4%BA%8E%E5%9C%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E5%92%8C%E9%AA%8C%E8%AF%81/","content":"数据库中加密存储密码和验证密码的步骤以下内容来自ChatGLM\n存储密码\n生成盐（Salt）：\n为每个用户生成一个随机盐。\n\n\n密码与盐结合：\n将用户密码与盐值结合。\n\n\n加密：\n使用上述算法对结合后的密码进行加密。\n\n\n存储：\n将加密后的密码（哈希值）和盐存储在数据库中。\n\n\n\n验证密码\n从数据库中取出盐和哈希值：\n\n在用户尝试登录时，系统需要从数据库中检索与该用户账户关联的盐值和之前存储的哈希密码。\n\n\n使用相同的算法和盐对用户输入的密码进行加密：\n\n将用户输入的密码与从数据库中取出的盐值结合，然后使用相同的加密算法对结合后的密码进行加密。\n\n\n比较加密后的值与数据库中的哈希值是否相同：\n\n将新计算出的哈希值与数据库中存储的哈希值进行比较。如果两者匹配，说明用户输入的密码正确；如果不匹配，说明密码错误。\n\n\n\n关于盐：\n内容来自 https://www.cnblogs.com/xjnotxj/p/12716981.html\n\n盐不能太短\n盐不能重复使用（否则一破解，所有的都遭殃）\n盐随机变化（例如，虽用户名不重复，但用户名不能拿来当盐）\n\nTypeScript 代码实现生成加密后的哈希密码import crypto from &#39;crypto&#39;;\n\n&#x2F;&#x2F; 生成盐值(生成随机字符串转换16进制并截取指定长度)\nfunction generateSalt(length: number &#x3D; 16): string &#123;\n    return crypto.randomBytes(Math.ceil(length &#x2F; 2)).toString(&#39;hex&#39;).slice(0, length);\n&#125;\n\n&#x2F;&#x2F; 哈希密码\nfunction hashPassword(password: string, salt: string): string &#123;\n    const hash &#x3D; crypto.createHash(&#39;sha256&#39;);\n    hash.update(password + salt);\n    return hash.digest(&#39;hex&#39;);\n&#125;\n\n&#x2F;&#x2F; 示例用法\nconst username &#x3D; &#39;张三&#39;;\nconst password &#x3D; &#39;myPassword123&#39;;\nconst salt &#x3D; generateSalt();\nconst hashedPassword &#x3D; hashPassword(password, salt);\nconst userInfo &#x3D; &#123;\n    username: username,\n    hashedPassword: hashedPassword,\n    salt: salt,\n&#125;\n\nconsole.log(userInfo)\n\n&#x2F;&#x2F; &#123;\n&#x2F;&#x2F;     username: &#39;张三&#39;,\n&#x2F;&#x2F;     hashedPassword: &#39;d199f982ad02822110e05685241cb134b965e1d767dcad581d0d2be99f72d585&#39;,\n&#x2F;&#x2F;     salt: &#39;be90365eb56291d2&#39;\n&#x2F;&#x2F; &#125;\n\n使用保存的哈希密码和盐值对用户输入的密码进行验证import crypto from &#39;crypto&#39;;\n\nconst userInfo &#x3D; &#123;\n    username: &#39;张三&#39;,\n    hashedPassword: &#39;d199f982ad02822110e05685241cb134b965e1d767dcad581d0d2be99f72d585&#39;,\n    salt: &#39;be90365eb56291d2&#39;\n&#125;\n\n&#x2F;&#x2F; 哈希密码\nfunction hashPassword(password: string, salt: string): string &#123;\n    const hash &#x3D; crypto.createHash(&#39;sha256&#39;);\n    hash.update(password + salt);\n    return hash.digest(&#39;hex&#39;);\n&#125;\n\nconst inputPassword1 &#x3D; &#39;myPassword123&#39;;\nconst inputPassword2 &#x3D; &#39;myPassword321&#39;;\nconst hashedInputPassword1 &#x3D; hashPassword(inputPassword1, userInfo.salt);\nconst hashedInputPassword2 &#x3D; hashPassword(inputPassword2, userInfo.salt);\n\nif (hashedInputPassword1 &#x3D;&#x3D; userInfo.hashedPassword) &#123;\n    console.log(&#39;密码正确&#39;);\n&#125;else&#123;\n    console.log(&#39;密码错误&#39;);\n&#125;\n\nif (hashedInputPassword2 &#x3D;&#x3D; userInfo.hashedPassword) &#123;\n    console.log(&#39;密码正确&#39;);\n&#125;else&#123;\n    console.log(&#39;密码错误&#39;);\n&#125;\n\n&#x2F;&#x2F;结果可知 inputpassword1验证正确 inputpassword2验证错误\n\n"},{"title":"关于处理CORS问题","url":"/2024/11/27/%E5%85%B3%E4%BA%8E%E5%A4%84%E7%90%86CORS%E9%97%AE%E9%A2%98/","content":"CORS（跨源资源共享）？\n以下内容引用自 mdn web docs\n跨源资源共享（CORS，或通俗地译为跨域资源共享）是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其他源（域、协议或端口），使得浏览器允许这些源访问加载自己的资源。跨源资源共享还通过一种机制来检查服务器是否会允许要发送的真实请求，该机制通过浏览器发起一个到服务器托管的跨源资源的“预检”请求。在预检中，浏览器发送的头中标示有 HTTP 方法和真实请求中会用到的头。\n\n举例：在 http://localhost:8000 的网页上使用 fetch() 对 https://sm.ms/api/v2/ 这个图床的api接口发送请求即会产生CORS问题。\n\n\n解决方法\n在Web服务器设置HTTP头部信息，比如Access-Control-Allow-Origin\n这里以 Nginx 为例：\n# https:&#x2F;&#x2F;enable-cors.org&#x2F;server_nginx.html\n# 为nginx配置一个宽松的CORS（跨域资源共享）设置\n\nlocation &#x2F; &#123;\n    # 处理预检请求（OPTIONS请求）\n    if ($request_method &#x3D; &#39;OPTIONS&#39;) &#123;\n        # 允许所有来源的请求\n        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;\n        # 允许的HTTP方法\n        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;\n        \n        # 自定义头部和其他浏览器应该支持但可能不支持的头部\n        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39;;\n        \n        # 告诉客户端此预检信息有效期为20天（1728000秒）\n        add_header &#39;Access-Control-Max-Age&#39; 1728000;\n        \n        # 返回一个空的响应体，状态码为204（无内容）\n        add_header &#39;Content-Type&#39; &#39;text&#x2F;plain; charset&#x3D;utf-8&#39;;\n        add_header &#39;Content-Length&#39; 0;\n        return 204;\n    &#125;\n    \n    # 处理POST请求\n    if ($request_method &#x3D; &#39;POST&#39;) &#123;\n        # 允许所有来源的请求\n        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39; always;\n        # 允许的HTTP方法\n        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39; always;\n        # 允许的请求头部\n        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39; always;\n        # 允许客户端访问的响应头部\n        add_header &#39;Access-Control-Expose-Headers&#39; &#39;Content-Length,Content-Range&#39; always;\n    &#125;\n    \n    # 处理GET请求\n    if ($request_method &#x3D; &#39;GET&#39;) &#123;\n        # 允许所有来源的请求\n        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39; always;\n        # 允许的HTTP方法\n        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39; always;\n        # 允许的请求头部\n        add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range&#39; always;\n        # 允许客户端访问的响应头部\n        add_header &#39;Access-Control-Expose-Headers&#39; &#39;Content-Length,Content-Range&#39; always;\n    &#125;\n&#125;\n\n\n\n使用CORS header proxy 服务器\n这里以 Cloudflare Workers 为例：\n&#x2F;&#x2F; https:&#x2F;&#x2F;developers.cloudflare.com&#x2F;workers&#x2F;examples&#x2F;cors-header-proxy&#x2F;\nexport default &#123;\n    async fetch(request) &#123;\n        const corsHeaders &#x3D; &#123;\n            &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;, &#x2F;&#x2F; 允许所有来源的请求\n            &quot;Access-Control-Allow-Methods&quot;: &quot;GET,HEAD,POST,OPTIONS&quot;, &#x2F;&#x2F; 允许的HTTP方法\n            &quot;Access-Control-Max-Age&quot;: &quot;86400&quot;, &#x2F;&#x2F; 预检请求的缓存时间（24小时）\n        &#125;;\n\n        &#x2F;&#x2F; 远程第三方API的URL，该API没有实现CORS\n        const API_URL &#x3D; &quot;https:&#x2F;&#x2F;examples.cloudflareworkers.com&#x2F;demos&#x2F;demoapi&quot;;\n\n        &#x2F;&#x2F; CORS反向代理的端点\n        const PROXY_ENDPOINT &#x3D; &quot;&#x2F;corsproxy&#x2F;&quot;;\n\n        &#x2F;&#x2F; 用于返回HTML响应的辅助函数\n        function rawHtmlResponse(html) &#123;\n            return new Response(html, &#123;\n                headers: &#123;\n                    &quot;content-type&quot;: &quot;text&#x2F;html;charset&#x3D;UTF-8&quot;, &#x2F;&#x2F; 设置响应头为HTML\n                &#125;,\n            &#125;);\n        &#125;\n\n        &#x2F;&#x2F; 演示页面的HTML内容\n        const DEMO_PAGE &#x3D; &#96;\n        &lt;!DOCTYPE html&gt;\n        &lt;html&gt;\n        &lt;body&gt;\n          &lt;h1&gt;API GET without CORS Proxy&lt;&#x2F;h1&gt;\n          &lt;a target&#x3D;&quot;_blank&quot; href&#x3D;&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Fetch_API&#x2F;Using_Fetch#Checking_that_the_fetch_was_successful&quot;&gt;Shows TypeError: Failed to fetch since CORS is misconfigured&lt;&#x2F;a&gt;\n          &lt;p id&#x3D;&quot;noproxy-status&quot;&#x2F;&gt;\n          &lt;code id&#x3D;&quot;noproxy&quot;&gt;Waiting&lt;&#x2F;code&gt;\n          &lt;h1&gt;API GET with CORS Proxy&lt;&#x2F;h1&gt;\n          &lt;p id&#x3D;&quot;proxy-status&quot;&#x2F;&gt;\n          &lt;code id&#x3D;&quot;proxy&quot;&gt;Waiting&lt;&#x2F;code&gt;\n          &lt;h1&gt;API POST with CORS Proxy + Preflight&lt;&#x2F;h1&gt;\n          &lt;p id&#x3D;&quot;proxypreflight-status&quot;&#x2F;&gt;\n          &lt;code id&#x3D;&quot;proxypreflight&quot;&gt;Waiting&lt;&#x2F;code&gt;\n          &lt;script&gt;\n          let reqs &#x3D; &#123;&#125;;\n          reqs.noproxy &#x3D; () &#x3D;&gt; &#123;\n            return fetch(&quot;$&#123;API_URL&#125;&quot;).then(r &#x3D;&gt; r.json())\n          &#125;\n          reqs.proxy &#x3D; async () &#x3D;&gt; &#123;\n            let href &#x3D; &quot;$&#123;PROXY_ENDPOINT&#125;?apiurl&#x3D;$&#123;API_URL&#125;&quot;\n            return fetch(window.location.origin + href).then(r &#x3D;&gt; r.json())\n          &#125;\n          reqs.proxypreflight &#x3D; async () &#x3D;&gt; &#123;\n            let href &#x3D; &quot;$&#123;PROXY_ENDPOINT&#125;?apiurl&#x3D;$&#123;API_URL&#125;&quot;\n            let response &#x3D; await fetch(window.location.origin + href, &#123;\n              method: &quot;POST&quot;,\n              headers: &#123;\n                &quot;Content-Type&quot;: &quot;application&#x2F;json&quot;\n              &#125;,\n              body: JSON.stringify(&#123;\n                msg: &quot;Hello world!&quot;\n              &#125;)\n            &#125;)\n            return response.json()\n          &#125;\n          (async () &#x3D;&gt; &#123;\n          for (const [reqName, req] of Object.entries(reqs)) &#123;\n            try &#123;\n              let data &#x3D; await req()\n              document.getElementById(reqName).innerHTML &#x3D; JSON.stringify(data)\n            &#125; catch (e) &#123;\n              document.getElementById(reqName).innerHTML &#x3D; e\n            &#125;\n          &#125;\n        &#125;)()\n          &lt;&#x2F;script&gt;\n        &lt;&#x2F;body&gt;\n        &lt;&#x2F;html&gt;\n      &#96;;\n\n        &#x2F;&#x2F; 处理请求的函数\n        async function handleRequest(request) &#123;\n            const url &#x3D; new URL(request.url);\n            let apiUrl &#x3D; url.searchParams.get(&quot;apiurl&quot;); &#x2F;&#x2F; 获取请求中的apiurl参数\n\n            if (apiUrl &#x3D;&#x3D; null) &#123;\n                apiUrl &#x3D; API_URL; &#x2F;&#x2F; 如果没有提供apiurl参数，则使用默认的API_URL\n            &#125;\n\n            &#x2F;&#x2F; 重写请求以指向API URL，并设置Origin头以避免CORS问题\n            request &#x3D; new Request(apiUrl, request);\n            request.headers.set(&quot;Origin&quot;, new URL(apiUrl).origin);\n            let response &#x3D; await fetch(request);\n\n            &#x2F;&#x2F; 重新创建响应以便修改响应头\n            response &#x3D; new Response(response.body, response);\n\n            &#x2F;&#x2F; 设置CORS头\n            response.headers.set(&quot;Access-Control-Allow-Origin&quot;, url.origin);\n\n            &#x2F;&#x2F; 添加Vary头以便浏览器正确缓存响应\n            response.headers.append(&quot;Vary&quot;, &quot;Origin&quot;);\n\n            return response;\n        &#125;\n\n        &#x2F;&#x2F; 处理OPTIONS请求的函数\n        async function handleOptions(request) &#123;\n            if (\n                request.headers.get(&quot;Origin&quot;) !&#x3D;&#x3D; null &amp;&amp;\n                request.headers.get(&quot;Access-Control-Request-Method&quot;) !&#x3D;&#x3D; null &amp;&amp;\n                request.headers.get(&quot;Access-Control-Request-Headers&quot;) !&#x3D;&#x3D; null\n            ) &#123;\n                &#x2F;&#x2F; 处理CORS预检请求\n                return new Response(null, &#123;\n                    headers: &#123;\n                        ...corsHeaders,\n                        &quot;Access-Control-Allow-Headers&quot;: request.headers.get(\n                            &quot;Access-Control-Request-Headers&quot;,\n                        ),\n                    &#125;,\n                &#125;);\n            &#125; else &#123;\n                &#x2F;&#x2F; 处理标准的OPTIONS请求\n                return new Response(null, &#123;\n                    headers: &#123;\n                        Allow: &quot;GET, HEAD, POST, OPTIONS&quot;,\n                    &#125;,\n                &#125;);\n            &#125;\n        &#125;\n\n        const url &#x3D; new URL(request.url);\n        if (url.pathname.startsWith(PROXY_ENDPOINT)) &#123;\n            if (request.method &#x3D;&#x3D;&#x3D; &quot;OPTIONS&quot;) &#123;\n                &#x2F;&#x2F; 处理CORS预检请求\n                return handleOptions(request);\n            &#125; else if (\n                request.method &#x3D;&#x3D;&#x3D; &quot;GET&quot; ||\n                request.method &#x3D;&#x3D;&#x3D; &quot;HEAD&quot; ||\n                request.method &#x3D;&#x3D;&#x3D; &quot;POST&quot;\n            ) &#123;\n                &#x2F;&#x2F; 处理对API服务器的请求\n                return handleRequest(request);\n            &#125; else &#123;\n                return new Response(null, &#123;\n                    status: 405,\n                    statusText: &quot;Method Not Allowed&quot;, &#x2F;&#x2F; 返回405状态码，表示方法不允许\n                &#125;);\n            &#125;\n        &#125; else &#123;\n            return rawHtmlResponse(DEMO_PAGE); &#x2F;&#x2F; 返回演示页面的HTML内容\n        &#125;\n    &#125;,\n&#125;;\n\n相关推荐使用Cloudflare Workers转发任意请求 Zibri&#x2F;cloudflare-cors-anywhere\n我写的smms-proxy-workers，用于代理smms图床api duzhuoshanwai&#x2F;smms-proxy-workers\nmdn web docs - CORS 错误\n"},{"title":"再见2024，你好2025","url":"/2024/12/31/%E5%86%8D%E8%A7%812024%EF%BC%8C%E4%BD%A0%E5%A5%BD2025/","content":"最期待：天国：拯救2 https://www.kingdomcomerpg.com/\n"},{"title":"利用Cloudflare WARP为服务器实现双栈IPv4/IPv6支持","url":"/2025/04/06/%E5%88%A9%E7%94%A8Cloudflare-WARP%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%8F%8C%E6%A0%88IPv4-IPv6%E6%94%AF%E6%8C%81/","content":"场景需求：购买的VPS仅分配有IPv4&#x2F;IPv6地址，但需访问仅支持IPv4&#x2F;IPv6的服务。我们可以利用Cloudflare WARP的代理隧道，为这台VPS添加双栈网络访问支持。\n\n\n安装 cloudflare-warp 软件包参考：https://pkg.cloudflareclient.com/\n配置连接注：我组网使用的是Tailscale，所以下面只考虑使用普通的WARP Client而不使用Cloudflare Zero Trust，如有需要请查看https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/。\n# 使用前必须先注册这个client\nroot@zgocloud:~# warp-cli registration new\nSuccess\nroot@zgocloud:~# warp-cli registration show\nAccount type: Free\nID: 264065dc-95fc-400b-a8de-b89a5795275d\nDevice ID: 264065dc-95fc-400b-a8de-b89a5795275d\nPublic key: 3059301306072a8648ce3d020106082a8648ce3d03010703420004d13537da59da4a1587e0c730bc213d651d8327ef6e01da64302518fe7ac2ba826f7d712c9ed5ff8ea6e6570491b5989c4cd684a9fddf4d4ec3bcb0c6d0b6eaac\nAccount ID: 8856c87c48e94d92acf64f02216d26d1\nLicense: 170D3IGe-x8NR01Z6-HtL0751B\nroot@zgocloud:~# \n\n\n管理隧道IP范围（需要添加你需要保留的IP段，比如为服务器添加IPv6访问能力就需要添加绕过IPv4全段）\n\n# 排除所有IPv4流量\nwarp-cli tunnel ip add-range 0.0.0.0&#x2F;0\n\n# 排除所有IPv6流量\nwarp-cli tunnel ip add-range ::&#x2F;0\n\n# 查看已配置的IP范围\nroot@zgocloud:~# warp-cli tunnel ip list\nExcluded routes:\n  10.0.0.0&#x2F;8\n  100.64.0.0&#x2F;10\n  169.254.0.0&#x2F;16\n  172.16.0.0&#x2F;12\n  192.0.0.0&#x2F;24\n  192.168.0.0&#x2F;16\n  224.0.0.0&#x2F;24\n  240.0.0.0&#x2F;4\n  239.255.255.250&#x2F;32\n  255.255.255.255&#x2F;32\n  fe80::&#x2F;10\n  fd00::&#x2F;8\n  ff01::&#x2F;16\n  ff02::&#x2F;16\n  ff03::&#x2F;16\n  ff04::&#x2F;16\n  ff05::&#x2F;16\n  fc00::&#x2F;7\n  17.249.0.0&#x2F;16\n  17.252.0.0&#x2F;16\n  17.57.144.0&#x2F;22\n  17.188.128.0&#x2F;18\n  17.188.20.0&#x2F;23\n  2620:149:a44::&#x2F;48\n  2403:300:a42::&#x2F;48\n  2403:300:a51::&#x2F;48\n  2a01:b740:a42::&#x2F;48\n  0.0.0.0&#x2F;0 (CLI exclude)\n\n检查root@zgocloud:~# curl -6 ip.sb\n2a09:bac5:636a:1173::2bd:d4\n\n\n"},{"title":"行政区划代码","url":"/2022/01/18/%E5%8C%BA%E5%88%92%E4%BB%A3%E7%A0%81/","content":"县及县以上行政区划代码\n中华人民共和国国家标准 GB&#x2F;T 2260 行政区划代码\n数据来源：\n\nhttp://www.stats.gov.cn/tjsj/tjbz/xzqhdm/\nhttp://www.mca.gov.cn/article/sj/tjbz/a/\n\n你可以利用国家标准数据构建自己项目的数据库。\nBadgesBadges with spec versions:\n\nBadge: https:&#x2F;&#x2F;img.shields.io&#x2F;badge&#x2F;GB%2FT%202260-v0.2-blue.svg\nLink: https:&#x2F;&#x2F;github.com&#x2F;cn&#x2F;GB2260&#x2F;blob&#x2F;v0.2&#x2F;spec.md\n\n\n语言实现目前已有的语言实现\nPythonRepository: https://github.com/cn/GB2260.py\n\nJavaScriptRepository: https://github.com/cn/GB2260.js\n\nRubyRepository: https://github.com/cn/GB2260.rb\n\nJavaRepository: https://github.com/cn/GB2260.java\n\nPHPRepository: https://github.com/cn/GB2260.php\n\nGoRepository: https://github.com/cn/GB2260.go\nElixirRepository: https://github.com/cn/GB2260.ex\n\nSwiftRepository: https://github.com/cn/GB2260.swift\n\n.NET &#x2F; C#Repository: https://github.com/cn/GB2260.cs\n\n如何贡献创建你熟悉的语言的模块，请务必使用 MIT&#x2F;BSD&#x2F;WTFPL 授权。\n"},{"title":"喜报：可能被GFW干了","url":"/2024/09/04/%E5%96%9C%E6%8A%A5%EF%BC%9A%E5%8F%AF%E8%83%BD%E8%A2%ABGFW%E5%B9%B2%E4%BA%86/","content":"\n2024.09.24 更新\n"},{"title":"在 SQLite 中使用 UUID 扩展","url":"/2025/06/28/%E5%9C%A8-SQLite-%E4%B8%AD%E4%BD%BF%E7%94%A8-UUID-%E6%89%A9%E5%B1%95/","content":"为什么使用UUIDUUID (Universally Unique Identifier) 作为主键在数据库中有几个显著优势，特别是在 SQLite 中使用 BLOB 类型存储时：\nUUID 的主要优势\n全局唯一性：\n几乎可以保证在不同时间、不同机器上生成的ID都是唯一的\n避免了分布式系统中的ID冲突问题\n\n\n安全性：\n比自增整数更难猜测，减少信息泄露风险\n适用于需要隐藏数据规模的场景\n\n\n离线生成：\n客户端可以在不连接数据库的情况下生成有效的ID\n适合离线应用或同步场景\n\n\n无中心化需求：\n不需要中央服务器分配ID，适合分布式系统\n\n\n\n在 SQLite 中使用 BLOB 存储 UUID 的优势\n存储效率：\nBLOB(16字节)比文本表示(36字符)更紧凑\n节省存储空间，特别是大量记录时\n\n\n性能优势：\n二进制比较比字符串比较更快\n索引效率更高\n\n\n一致性：\n避免文本表示的大小写和格式问题\n\n\n\n使用 Run-Time Loadable Extensions 使 SQLite3 支持 UUID编译 .so 共享库\n下载 uuid.c https://www.sqlite.org/src/file?name=ext/misc/uuid.c\n\n\n编译成共享库（shared library file）并移动到&#x2F;usr&#x2F;local&#x2F;lib（可选）\ngcc -fPIC -shared uuid.c -o uuid.so\nsudo mkdir -p &#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3\nsudo cp uuid.so &#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3&#x2F;uuid.so \n\n在 sqlite3 命令行中使用\n（可选）修改 ~&#x2F;.sqliterc 使在使用 sqlite3 命令行时自动加载扩展\necho &quot;.load &#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3&#x2F;uuid&quot; &gt;&gt; ~&#x2F;.sqliterc\n\n检查扩展功能\n$ sqlite3\n-- Loading resources from &#x2F;home&#x2F;duzhuo&#x2F;.sqliterc\nSQLite version 3.45.1 2024-01-30 16:01:20\nEnter &quot;.help&quot; for usage hints.\nConnected to a transient in-memory database.\nUse &quot;.open FILENAME&quot; to reopen on a persistent database.\nsqlite&gt; .load &#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3&#x2F;uuid\nsqlite&gt; SELECT uuid();\n65a54293-036f-4aec-869b-2dcdcd523555\nsqlite&gt; \n\n在 Python 标准库中使用 SQLite 加载扩展注意：Python 默认禁用 SQLite 扩展加载（安全原因）。如需启用，必须重新编译 Python 并加上 –enable-loadable-sqlite-extensions 选项。\n产生的报错信息 ：\nAttributeError: &#39;sqlite3.Connection&#39; object has no attribute &#39;enable_load_extension&#39;AttributeError: &#39;sqlite3.Connection&#39; object has no attribute &#39;load_extension&#39;\n这里以 pyenv 重新安装示例：\n$ PYTHON_CONFIGURE_OPTS&#x3D;&quot;--enable-loadable-sqlite-extensions&quot; pyenv install 3.13\npyenv: &#x2F;home&#x2F;duzhuo&#x2F;.pyenv&#x2F;versions&#x2F;3.13.3 already exists\ncontinue with installation? (y&#x2F;N) y\nInstalling Python-3.13.3...\nInstalled Python-3.13.3 to &#x2F;home&#x2F;duzhuo&#x2F;.pyenv&#x2F;versions&#x2F;3.13.3\n$ python3\nPython 3.13.3 (main, Jun 28 2025, 14:46:43) [GCC 13.3.0] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import sqlite3\n&gt;&gt;&gt; con &#x3D; sqlite3.connect(&quot;:memory:&quot;)\n&gt;&gt;&gt; con.enable_load_extension(True)\n&gt;&gt;&gt; con.load_extension(&quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3&#x2F;uuid.so&quot;)\n&gt;&gt;&gt; con.close()\n\nUUID 扩展的 Python 使用示例：\nimport sqlite3\nfrom sqlite3 import Cursor, Connection\nfrom typing import Dict, Optional\n\n\ndef init_db() -&gt; Connection:\n    &quot;&quot;&quot;初始化数据库并加载 UUID 扩展&quot;&quot;&quot;\n    conn: Connection &#x3D; sqlite3.connect(&quot;:memory:&quot;)\n    # 启用字典游标,使fetch不返回元组返回字典\n    conn.row_factory &#x3D; sqlite3.Row\n\n    # 加载扩展（路径需根据实际情况调整）\n    conn.enable_load_extension(True)\n    conn.load_extension(&quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;sqlite3&#x2F;uuid&quot;)  # 或 .dll\n\n    # 创建测试表\n    conn.execute(\n        &quot;&quot;&quot;\n    CREATE TABLE items (\n        id BLOB PRIMARY KEY,  -- 存储为 16 字节 BLOB\n        name TEXT\n    )\n    &quot;&quot;&quot;\n    )\n    return conn\n\n\ndef demo_uuid_operations(conn: Connection) -&gt; None:\n    &quot;&quot;&quot;演示纯 SQLite UUID 扩展操作&quot;&quot;&quot;\n    cursor: Cursor &#x3D; conn.cursor()\n\n    # 插入数据（完全使用 SQLite 函数）\n    cursor.execute(\n        &quot;&quot;&quot;\n    INSERT INTO items (id, name)\n    VALUES \n        (uuid_blob(uuid()), &#39;Item1&#39;),  -- 生成随机 UUID 并转为 BLOB\n        (uuid_blob(&#39;a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11&#39;), &#39;Item2&#39;)  -- 从字符串转换\n    &quot;&quot;&quot;\n    )\n\n    # 查询并格式化 UUID\n    query_statement: str &#x3D; &quot;&quot;&quot;\n    SELECT \n        name, \n        uuid_str(id) AS uuid  -- 将 BLOB 转为标准字符串\n    FROM items\n    &quot;&quot;&quot;\n\n    print(&quot;\\n所有物品：&quot;)\n    for row in cursor.execute(query_statement).fetchall():\n        print(row[&#39;name&#39;], row[&#39;uuid&#39;])\n\n    # 按 UUID 查询\n    input_uuid: str &#x3D; &quot;A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11&quot;  # 支持各种格式\n    cursor.execute(\n        &quot;&quot;&quot;\n    SELECT name FROM items \n    WHERE id &#x3D; uuid_blob(?)\n    &quot;&quot;&quot;,\n        (input_uuid,),\n    )\n    result: Optional[Dict[str, str]] &#x3D; cursor.fetchone()\n    print(f&quot;\\n查询 UUID &#39;&#123;input_uuid&#125;&#39; 的结果：&#123;result[&quot;name&quot;] if result else &#39;未找到&#39;&#125;&quot;)\n\n\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    db: Connection &#x3D; init_db()\n    demo_uuid_operations(db)\n    db.close()\n\n\n"},{"title":"尝试为电视盒子刷入Armbian","url":"/2024/02/24/%E5%B0%9D%E8%AF%95%E4%B8%BA%E7%94%B5%E8%A7%86%E7%9B%92%E5%AD%90%E5%88%B7%E5%85%A5Armbian/","content":"准备\n运营商的电视盒子一只 以晶晨芯片的CM311-1为例 查看目前可用的设备列表\n\n双公头usb线 没有现成的可以用两根不要的线剥开对接四芯自己制作\n\n一个闲置的空u盘\n\n（可选)晶晨盒子短接神器 没有的话其实用镊子短接也可以\n\n\n晶晨烧录工具Amlogic_USB_Burning_Tool\n\n选择合适的安卓底包用来开启adb   部分底包分流\n\nadb工具 xda的安装教程参考 或者使用开心电视助手替代 链接\n\nbalena etcher 或者 rufus 用来写入Armbian镜像到u盘\n\n\n刷入底包\n打开晶晨刷机工具，设置→导入镜像。\n\n点击开始后准备接入线。\n\n关闭电源！！！ 插入刷机神器，双公线一头插入盒子靠近网口的那个usb口，另一头接入电脑usb口（2.0的可能好一点）。先在烧录工具上点开始，接入线，然后打开盒子上的电源开关等待烧录工具的提示即可。\n刷入Armbian镜像到U盘到release中选择适合自己硬件的固件 使用Balena Etcher刷入\n刷写之后的U盘，在设置盒子从U盘启动前先不要插入盒子。\n\n使用ABD设置电视盒子从usb启动开启ADB大部分安卓刷机包都已经设置了ADB调试。如果没有的话需要连点版本号进入开发者选项自行开启。\n使用命令行的ADB命令adb connect 192.168.2.162\nadb shell reboot update #输入命令之后再插入U盘！！！\n\n使用开心电视助手在首页输入电视盒子的ip和默认端口5555→调试→从U盘&#x2F;SD卡启动 ！！！点击之后再插入U盘！！！\n不要在安卓系统下插入U盘！！！可能会导致U盘中文件权限损坏，修复需要重新刷入Armbian镜像。\n\n\n使用SSH连接到重启之后的盒子并写入EMMC盒子成功启动后会自动从DHCP服务器获取IP地址，进入路由器后台查看\n\n使用SSH连接工具连接后默认的用户&#x2F;密码是 root&#x2F;1234 跟随提示设置普通用户和更改密码\n写入EMMC这里直接照搬项目README\n登录 Armbian 系统 (默认用户: root, 默认密码: 1234) → 输入命令：\narmbian-install\n\n\n\n\n可选参数\n默认值\n选项\n说明\n\n\n\n-m\nno\nyes&#x2F;no\n使用 Mainline u-boot\n\n\n-a\nyes\nyes&#x2F;no\n使用 ampart 分区表调整工具\n\n\n-l\nno\nyes&#x2F;no\nList. 显示全部设备列表\n\n\n举例: armbian-install -m yes -a no\n注意！！！有些型号写入EMMC可能会失败 需要反编译dtb文件 修改emmc频率\n几个参考的issue \nhttps://github.com/ophub/amlogic-s9xxx-armbian/issues/1603#issuecomment-1675634318\nhttps://github.com/ophub/amlogic-s9xxx-armbian/issues/2007#issue-2074390845\narmbian-update命令升级内核之后成砖头的解决办法盒子输入armbian之后默认启动顺序是 tf卡→u盘→emmc\n将任意烧录好armbian系统的u盘插上 等待启动后执行命令armbian-update -s用来恢复系统内核\n参见https://github.com/ophub/amlogic-s9xxx-armbian/blob/main/documents/README.cn.md#10-%E6%9B%B4%E6%96%B0-armbian-%E5%86%85%E6%A0%B8\n"},{"title":"掌玩mini(Alldocube iPlay 50 mini pro/T811M)刷入安卓GSI和简单的体验报告","url":"/2024/04/20/%E6%8E%8C%E7%8E%A9mini-Alldocube-iPlay-50-mini-pro-T811M-%E5%88%B7%E5%85%A5%E5%AE%89%E5%8D%93GSI/","content":"什么是GSI以下内容来自于 AOSP文档\n\n通用系统映像 (GSI) 是指已针对 Android 设备调整配置的系统映像。GSI 被视为“纯 Android”实现，它包含未经修改的 Android 开源项目 (AOSP) 代码，任何搭载 Android 9 或更高版本的 Android 设备都能顺利运行这种代码。\nGSI 用于运行 VTS 和 CTS-on-GSI 测试。为确保运行最新版 Android 的设备正确实现供应商接口，您需要将 Android 设备的系统映像替换为 GSI，然后使用供应商测试套件 (VTS) 和兼容性测试套件 (CTS) 来测试设备。\n\n掌玩mini的简单介绍\n8.4英寸全贴合屏幕 1920*1200 虽然显示效果不咋地用来读读文档够用\nHelio G99 上古soc几百块要什么自行车\n8+128 要什么自行车\nsim卡sd卡\n有3.5mm耳机孔 单扬声器垃圾水平\n5000mAh 18w(实测根本没有)\n做工有点差边框可能有异响 论坛反馈可能有断触情况需要自行拆机垫胶带\n\n刷入GSI注意!!! 进行一下操作前需要刷入官方国际版20230818固件，否则可能会无限重启\n需要准备的工具的链接spflashtools 降级刷入工具\nmtk_usb_all 联发科驱动\nxda论坛老哥移植的第三方recovery 可选\nplatform-tools 需要使用到的adb和fastboot工具\n刷入官方国际版固件20230818确保已经安装了联发科驱动!!!\n\n下载固件包并解压 官网 个人网盘分流\n\n将设备关机\n\n打开spflashtool 按照图中设置Download-XML为 .&#x2F;iPlay50miniPro(T811M)_EN_20230818&#x2F;download_agent&#x2F;flash.xml\n将Download Only改为Firmware Upgrade\n\n\n\n\n点击绿色箭头那个Download 然后把关机状态的平板连上电脑 等待完成\n\n刷入GSI建议添加adb和fastboot命令到PATH\n\n重启进入系统后连击版本号进入开发者模式打开 USB调试和OEM解锁\n\n解压 lineage-21.0-20240217-UNOFFICIAL-arm64_bgN.img.xz 得到img文件\n\n在解压好的platform-tools文件夹下打开命令行\n adb reboot bootloader 在平板上确认后重启到fastboot模式\n fastboot flashing unlock 按照平板上的提示按下音量减 解锁 这一步会清空所有数据!!!注意备份\n fastboot --disable-verity --disable-verification flash vbmeta_a vbmeta.img 刷入vbmeta并禁用Android Verified Boot (AVB)\n fastboot --disable-verity --disable-verification flash vbmeta_b vbmeta.img 同上\n\n重启到fastbootd后操作\n fastboot reboot fastboot 从fastboot重启到fastbootd模式\n fastboot set_active a 可能需要切换到分区a\n fastboot delete-logical-partition product_a 删除分区 product_a 这个分区是出厂自带的\n fastboot erase system_a 擦除分区 system_a\n fastboot flash system_a lineage-21.0-20240217-UNOFFICIAL-arm64_bgN.img 刷写上面解压的img到 system\n fastboot flash vendor_boot OFOX-IP50MP-BETA.img 刷入第三方rec (可选)\n fastboot flash vendor mod-vendor.img 刷入修改好的vendor\n fastboot flash boot magisk_patched-27000_l2O2k.img 刷入修补好的boot 用于获取root权限\n fastboot erase userdata 擦除 userdata分区\n fastboot erase metadata 擦除metadata分区\n\n重启系统 fastboot reboot 等待开机\n\n\n开机后的一些准备工作\n安装Magisk https://magiskmanager.com/downloading-magisk-manager\n\n\n修改dpi adb shell wm density 300\n\n修复耳机 \nadb.exe shell\nsu 切换到root用户 需要在平板上确认允许\nsetprop persist.sys.overlay.devinputjack true 然后重启设备\n\n\n enjoy !\n"},{"title":"提问的智慧","url":"/2022/01/28/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/","content":"提问的智慧\nHow To Ask Questions The Smart Way\nCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen\n本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。\n原文网址：http://www.catb.org/~esr&#x2F;faqs&#x2F;smart-questions.html\nCopyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu\n本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；\n协助指出翻译问题，请发 issue，或直接发 pull request 给我。\n本文另有繁體中文版。\n原文版本历史目录\n声明\n简介\n在提问之前\n当你提问时\n慎选提问的论坛\nStack Overflow\n网站和 IRC 论坛\n第二步，使用项目邮件列表\n使用有意义且描述明确的标题\n使问题容易回复\n使用清晰、正确、精准且合乎语法的语句\n使用易于读取且标准的文件格式发送问题\n精确地描述问题并言之有物\n话不在多而在精\n别动辄声称找到 Bug\n低声下气不能代替你的功课\n描述问题症状而非你的猜测\n按发生时间先后列出问题症状\n描述目标而不是过程\n别要求使用私人电邮回复\n清楚明确的表达你的问题以及需求\n询问有关代码的问题时\n别把自己家庭作业的问题贴上来\n去掉无意义的提问句\n即使你很急也不要在标题写紧急\n礼多人不怪，而且有时还很有帮助\n问题解决后，加个简短的补充说明\n\n\n如何解读答案\nRTFM 和 STFW：如何知道你已完全搞砸了\n如果还是搞不懂\n处理无礼的回应\n\n\n如何避免扮演失败者\n不该问的问题\n好问题与蠢问题\n如果得不到回答\n如何更好地回答问题\n相关资源\n鸣谢\n\n声明许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：\n本指南不提供此项目的实际支持服务！\n我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。\n如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。\n简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。\n不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的用户身上得到好答案，这是件好事；用户比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的用户视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。\n首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。\n尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。\n我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。\n我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。\n我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答赢家（winner）的问题。\n如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。\n所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。\n如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。\n（欢迎对本指南提出改进意见。你可以 email 你的建议至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。\n在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：\n\n尝试在你准备提问的论坛的旧文章中搜索答案。\n尝试上网搜索以找到答案。\n尝试阅读手册以找到答案。\n尝试阅读常见问题文件（FAQ）以找到答案。\n尝试自己检查或试验以找到答案。\n向你身边的强者朋友打听以找到答案。\n如果你是程序开发者，请尝试阅读源代码以找到答案。\n\n当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。\n运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 Google 论坛和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。\n别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。\n准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。\n小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。\n绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。\n另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。\n当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：\n\n在与主题不合的论坛上贴出你的问题。\n在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。\n在太多的不同新闻群组上重复转贴同样的问题（cross-post）。\n向既非熟人也没有义务解决你问题的人发送私人电邮。\n\n黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。\n因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。\n向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。\n在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。\n别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。\n搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。\n一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。\n可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。\nStack Overflow搜索，然后在 Stack Exchange 问。\n近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。\n因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。\nStack Exchange 已经成长到超过一百个网站，以下是最常用的几个站：\n\nSuper User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。\nStack Overflow 是问写程序有关的问题。\nServer Fault 是问服务器和网管相关的问题。\n\n网站和 IRC 论坛本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。\n事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用我们的版本”。\n在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。\n通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。\n在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。\n第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：\n\n任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。\n向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。\n大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。\n如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。\n\n如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。\n然而，如果你确信你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）\n如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。\n使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。\n一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。\n\n蠢问题：救命啊！我的笔记本电脑不能正常显示了！\n\n\n聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。\n\n\n更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。\n\n编写目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。\n总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。\n如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。\n对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。\n仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。\n在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。\n使问题容易回复以请将你的回复发送到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。\n在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。\n使用清晰、正确、精准且合乎语法的语句我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。\n正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。\n正确地拼写、使用标点和大小写，不要将its混淆为it&#39;s，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行）。\n更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通信中的简写或火星文，如将的简化为d会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。\n如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。\n如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用]\n\nEnglish is not my native language; please excuse typing errors.\n\n\n英文不是我的母语，请原谅我的错字或语法。\n\n\nIf you speak $LANGUAGE, please email&#x2F;PM me;I may need assistance translating my question.\n\n\n如果你说某语言，请向我发电邮&#x2F;私信；\n我需要有人协助我翻译我的问题。\n\n\nI am familiar with the technical terms,but some slang expressions and idioms are difficult for me.\n\n\n我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。\n\n\nI’ve posted my question in $LANGUAGE and English.I’ll be glad to translate responses, if you only use one or the other.\n\n\n我把我的问题用某语言和英文写出来。\n如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。\n\n使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：\n\n使用纯文字而不是 HTML (关闭 HTML 并不难）。\n使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。\n不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。\n但是，对一些特殊的文件不要设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。\n在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。\n绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。\n如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。\n在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。\n\n如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。\n精确地描述问题并言之有物\n仔细、清楚地描述你的问题或 Bug 的症状。\n描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。\n描述在提问前你是怎样去研究和理解这个问题的。\n描述在提问前为确定问题而采取的诊断步骤。\n描述最近做过什么可能相关的硬件或软件变更。\n尽可能的提供一个可以重现这个问题的可控环境的方法。\n\n尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。\n以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。\nSimon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。\n话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。\n这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。\n别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。\n请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。\n编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。\n提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。\n低声下气不能代替你的功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。\n别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。\n有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。\n描述问题症状而非你的猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。\n蠢问题\n\n我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？\n\n聪明问题\n\n我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…。\n\n由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！\n按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。\n如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。\n如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。\n描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。\n经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。\n蠢问题\n\n我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？\n\n聪明问题\n\n我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。\n\n第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。\n别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。\n当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。\n这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。\n清楚明确的表达你的问题以及需求漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。\n如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。\n要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。\n所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好地理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。\n询问有关代码的问题时别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;比较有可能让你得到回应。\n最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看话不在多而在精一节）。\n一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。\n如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。\n别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。\n如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的用户邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的用户也许仍会给你一些提示。\n去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。\n首先：如果你对问题的描述不是很好，这样问更是画蛇添足。\n其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。\n一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。\n即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。\n有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。\n当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛绒绒的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。\n如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。\n礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。\n坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）\n然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。\n（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。）\n问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。\n最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X的有趣），因此可以利用此时间去解决其它问题。\n补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。\n对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。\n除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。\n至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。\n思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。\n在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。\n如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM（Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。\nRTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！）\n在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。\n通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为\n\n你需要的信息非常容易获得；\n你自己去搜索这些信息比灌给你，能让你学到更多。\n\n你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。\n如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。\n比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？\n处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。\n如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。\n另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。\n（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）\nJeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。\n在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。\n如何避免扮演失败者在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。\n这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：\n熬过去，这很正常。事实上，它是有益健康且合理的。\n社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。\n也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。\n夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。\n记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。\n有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。\n这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。\n也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。\n不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的：\n问题：我能在哪找到 X 程序或 X 资源？\n问题：我怎样用 X 做 Y？\n问题：如何设定我的 shell 提示？\n问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？\n问题：我的程序&#x2F;设定&#x2F;SQL 语句没有用\n问题：我的 Windows 电脑有问题，你能帮我吗？\n问题：我的程序不会动了，我认为系统工具 X 有问题\n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？\n\n\n\n问题：我能在哪找到 X 程序或 X 资源？\n\n回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？\n\n\n问题：我怎样用 X 做 Y？\n\n回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。\n\n\n问题：如何设定我的 shell 提示？？\n\n回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。\n\n\n问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？\n\n回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。\n\n\n问题：我的{程序&#x2F;设定&#x2F;SQL 语句}不工作\n\n回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种\n\n你还有什么要补充的吗？\n真糟糕，希望你能搞定。\n这关我屁事？\n\n\n\n问题：我的 Windows 电脑有问题，你能帮我吗？\n\n回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。\n注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。\n\n\n问题：我的程序不会动了，我认为系统工具 X 有问题\n\n回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。\n\n\n问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？\n\n回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到用户群组的清单）。\n注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。\n\n\n问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？\n\n回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！\n好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。\n蠢问题：\n\n我可以在哪儿找到关于 Foonly Flurbamatic 的资料？\n\n这种问法无非想得到 STFW 这样的回答。\n聪明问题：\n\n我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？\n\n这个问题已经 STFW 过了，看起来他真的遇到了麻烦。\n蠢问题：\n\n我从 foo 项目找来的源码没法编译。它怎么这么烂？\n\n他觉得都是别人的错，这个傲慢自大的提问者。\n聪明问题：\n\nfoo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？\n\n提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。\n蠢问题：\n\n我的主机板有问题了，谁来帮我？\n\n某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。\n聪明问题：\n\n我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？\n\n这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。\n在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。\n事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。\n通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。\n事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。\n黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。\n如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。\n总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。\n你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。\n有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。\n另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。\n对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。\n如何更好地回答问题态度和善一点。 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。\n对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。\n如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。\n如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。\n试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。\n尽管对那些懒虫抱怨一声 RTFM 是正当的，但能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。\n如果你决定回答，就请给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。\n正面的回答问题！ 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。\n帮助你的社区从问题中学习。 当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。\n如果你在研究一番后才作出了回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。\n相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。\n当你发布软件或补丁时，试着按软件发布实践操作。\n鸣谢Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。\n"},{"title":"搬家整理网络--停更","url":"/2024/01/20/%E6%90%AC%E5%AE%B6%E6%95%B4%E7%90%86%E7%BD%91%E7%BB%9C-%E5%81%9C%E6%9B%B4/","content":"如题\n"},{"title":"服务器被黑之后对ssh服务的亡羊补牢","url":"/2024/02/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A2%AB%E9%BB%91%E4%B9%8B%E5%90%8E%E5%AF%B9ssh%E6%9C%8D%E5%8A%A1%E7%9A%84%E4%BA%A1%E7%BE%8A%E8%A1%A5%E7%89%A2/","content":"起因前几天突然发现一台服务器掉线了…打开后台一看一整页全部都是Abuse Report，服务器也被suspend。在面板发现服务器被冻结前处于很长一段时间的满负载状态，Ticket内容显示这个ip被举报有扫描行为。\n\n通过提交工单请求解冻之后登录，过一段时间发现tor这个用户被盗用并且启动了一个叫blitz64的服务。\n\n后面通过删除被修改的crontab条目并重启修复，但是因为我忘了修改密码又被冻结了。^_^\n修复过程因为比较匆忙没有记录，这里附上参考资料。\nMy VPS is under attack\nHacked Server\n记一次ubuntu虚拟机被挖矿木马攻击的过程\n记一次 VPS 被黑掉拉进僵尸网络\n本文剩余部分用来记录修改密码并添加密钥登录和fail2ban的过程。\n设置ssh密钥登录"},{"title":"松香在焊接中的作用","url":"/2024/05/30/%E6%9D%BE%E9%A6%99%E5%9C%A8%E7%84%8A%E6%8E%A5%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8/","content":"为什么要使用松香松香是腐蚀性低，不会腐蚀电路元件和烙铁头，其熔点为127℃，活性可持续到315℃。\n松香有很高的抗氧化性能，可以在焊接过程中去除氧化膜、防止焊接面再次氧化。\n购买哪种松香\n松香的使用空心的低温焊锡丝中通常自带松香。\n盒装的松香使用时可以先将烙铁头上挂上锡，然后快速沾一下固态松香，再按到需要焊接的部分就可以轻松焊接。\n也可溶解在酒精中使用（我没试过，一般直接用焊油焊膏但是清洁麻烦）。\n在每次使用完烙铁后也可以放到松香中烫一下进行清洁，烙铁上面多余的锡会掉下来以达到清洁目的。\n\n"},{"title":"没有链接的互联网","url":"/2024/12/01/%E6%B2%A1%E6%9C%89%E9%93%BE%E6%8E%A5%E7%9A%84%E4%BA%92%E8%81%94%E7%BD%91/","content":"以下内容来自于科技爱好者周刊（第 327 期）：没有链接的互联网\n没有链接的互联网你能想象吗，没有链接的互联网是什么样？\n不用想了，这正在变成现实。\n2017年，脸书（Facebook）出台了一项政策：只要帖子里面有（外部）链接，就会减少这个帖子的曝光。\n也就是说，只要你贴了链接，别人就（几乎）看不见你的帖子了。这样做是为了防止用户跳出脸书，也为了防止用户为其他网站引流。\n所以，你现在访问脸书，就会看到一种奇特的做法：大家发帖都没有链接，有些帖子甚至只是一句话的图片（下图），真正的链接放在帖子的置顶评论里面。\n\n后来，其他的互联网平台纷纷跟进，限制链接。\n\n\n最典型的就是推特，它不断增加防止用户跳出的措施。先是推出“话题”功能（thread），后又解除字数限制，允许发布长文，尽量消除用户张贴链接的动机。最近，它将链接自动转成预览图时，甚至会隐藏页面标题，让用户察觉不到这是一个链接。\n就连谷歌这种搜索引擎，也在防止用户跳出。搜索时，谷歌会直接显示一段 AI 生成的内容总结（下图），避免你去点击外部链接。\n\n国内平台也是如此，有过之而无不及，比如微信、抖音，都严格限制外部链接。\n总之，大型互联网平台都在排斥链接。它们的共识就是，必须把用户留在自己的花园，防止他们离开。\n这种情况，将来恐怕愈演愈烈。因为 AI 可以实时生成内容，更没有必要让用户访问外部内容了。\n没有链接可点击，这将彻底改变互联网生态。我看到一篇文章，列出这种趋势的七大后果，总结得很好。\n（1）独立网站会消失，因为没有流量来源了。所有人都依赖大平台，只能在平台上发布内容，否则没人能看到。\n（2）数字出版行业终结，因为不需要单独的出版环节了，直接发布到大平台就可以了。\n（3）域名不再具有价值，因为小网站不管采用什么域名，都没有访客。大多数域名注册商会关门。\n（4）网络托管业务将会收缩，因为网站数量将减少，个人架设网站的需求越来越少。\n（5）独立的互联网广告业也会消失。所有的互联网广告，都将由平台控制，独立的广告联盟一钱不值。小网站也不可能通过互联网广告赚到钱。\n（6）SEO 无用了。小网站没有流量了，优化搜索引擎的排名有何意义呢？\n（7）信息表面化。因为用户不太可能在平台上贡献深层次的详细内容，所以平台提供的大多是表面信息，能够帮助用户的深层次的内容将难找到。\n"},{"title":"猿神,启动!","url":"/2024/08/21/%E7%8C%BF%E7%A5%9E-%E5%90%AF%E5%8A%A8/","content":"\n"},{"title":"记录一次掉盘 群联PS3111-S11-13 + 长江CA7AG64A0A","url":"/2024/08/31/%E7%BE%A4%E8%81%94s11-YMTC%E6%8E%89%E7%9B%98%E4%BF%AE%E5%A4%8D/","content":"part 1终于 7×24 运行的它掉盘了。\n\n型号：速柏 CS500 （89块钱480G要什么自行车）\n方案：群联PS3111-S11-13 + 长江CA7AG64A0A\n\npart2参考链接：\nhttps://www.itwk.cc/post/981.html\nhttps://www.usbdev.ru/files/phison/ps3111fw/\nhttp://vlo.name:3000/ssdtool/\nhttps://www.flashinfo.top/FlashInfo\nhttps://download.saint1337.top/tools/ps3111-s11-13/\n使用 phison_flash_id 工具查看颗粒信息，获得NAND信息 ONFI : YMTC  YMN08TB1W00U1B (2020-08) [A34D]。\nPhison S5&#x2F;S8&#x2F;S9&#x2F;S10&#x2F;S11 flash ID reader v0.844a by Ochkin Vadim\n 0: (WDC WD40PURX-78AKYY0\n 1: (TOSHIBA HDWD130\n 2: (WDC WD10JPVX-22JC3T0\n 3: (LITEON S960 256\n 4: (GALAX TA1D0240A\n 5: (SATAFIRM   S11\n 6: (KINGBANK KP230 Pro\nPlease select drive number:5\nDrive: 5(ATA)\nModel: SATAFIRM   S11\nFw   : SBFMP1W3\nSize : 457862 MB\nFirmware lock supported [A9 00 01 02]\nDrive unlocked [A9 00 01 03]\nP&#x2F;N  : 511-200804205   , SBSMP1.2\nS11fw: SBFMP1.3, 2020Feb26\nS11rv: MP1.3-72\nOriginal Model: CUBEX CS500 480GB\nOriginal Fw   : CSFMP1.3\nBank00: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank01: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank02: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank03: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank04: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank05: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank06: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank07: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank08: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank09: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank10: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank11: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank12: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank13: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank14: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nBank15: 0x9b,0xc3,0x48,0x25,0x10,0x0,0x0,0x0 - YMTC 3dv2-64L(x1-9050) TLC 16k 256Gb&#x2F;CE 256Gb&#x2F;die 2Plane&#x2F;die\nController    : PS3111\nFlash CE      : 16\nFlash Channel : 2\nDRAM Size,MB  : 32\nFlash CE Mask : [++++++++ ++++++++]\nFlash Mode&#x2F;Clk: 5&#x2F;7 (Set 5&#x2F;7)\nSLC Cache     : 786432(0xc0000)\n\nTry to read nand parameter page...\nONFI      : YMTC         YMN08TB1W00U1B (2020-08) [A34D]\nPage size : 18432 (16384+2048)\nPage&#x2F;Block: 1152\nBlock&#x2F;LUN : 2012\nLUN&#x2F;Chip  : 1\nBit&#x2F;Cell  : 3 (TLC)\nEndurance : 500\nPlanAdrBit: 1 (2 plane)\n\nMaxBBPerPlane : 92\nPlane         : 2\n\nDefects All(per plane)  Early           Later\nBank00:   7(3,4)          7(3,4)          0(0,0)\nBank01:  14(6,8)         14(6,8)          0(0,0)\nBank02:  13(6,7)         13(6,7)          0(0,0)\nBank03:   9(3,6)          9(3,6)          0(0,0)\nBank04:   6(2,4)          6(2,4)          0(0,0)\nBank05:   5(2,3)          5(2,3)          0(0,0)\nBank06:   7(2,5)          7(2,5)          0(0,0)\nBank07:   5(3,2)          5(3,2)          0(0,0)\nBank08:  13(4,9)         13(4,9)          0(0,0)\nBank09:   6(3,3)          6(3,3)          0(0,0)\nBank10:   7(3,4)          7(3,4)          0(0,0)\nBank11:   4(2,2)          4(2,2)          0(0,0)\nBank12:   8(4,4)          8(4,4)          0(0,0)\nBank13:   7(5,2)          7(5,2)          0(0,0)\nBank14:   5(2,3)          5(2,3)          0(0,0)\nBank15:   6(4,2)          6(4,2)          0(0,0)\nTotal : 122             122               0\n\nRead EC..\nSaved to: phison_flash_id.txt\n\nPress any key to exit or Space to open full text report\nPlease share reports as text, not a sreenshot!\n\n\n搜索信息找到帖子 https://www.itwk.cc/post/981.html 并下载https://download.saint1337.top/tools/ps3111-s11-13/。\n工具是傻瓜式操作，断电状态接上硬盘运行Reinitial_SBFMP1B3_V6.exe即可。\n操作成功后可以看到固件从 SBFMP1W3 变成了 SBFMP1B3。\n\n"},{"title":"胡锡进笑话一则——老胡论安检","url":"/2024/06/18/%E8%83%A1%E9%94%A1%E8%BF%9B%E7%AC%91%E8%AF%9D2024-06-18/","content":"\n源链接位置：https://weibo.com/7217947278/OixgbndYl\n\n\n\n"},{"title":"优麒麟版微信修改/etc/lsb-release后识别错误问题","url":"/2023/11/06/%E8%A7%A3%E5%86%B3%E4%BC%98%E9%BA%92%E9%BA%9F%E7%89%88%E5%BE%AE%E4%BF%A1%E4%BF%AE%E6%94%B9%E2%81%84etc%E2%81%84lsb-release%E7%9A%84%E9%97%AE%E9%A2%98/","content":"问题发现使用 tabby 官方提供的 Debian repo 时 发现识别系统为 Kylin 导致无法使用脚本添加 repo\n查看脚本信息发现检测的文件为 /etc/lsb-release \n\n解决办法一番检索后找到了这个帖子 https://v2ex.com/t/906470 发现应该是优麒麟版微信在 /etc 里面拉屎 张小龙你吗死了\n添加 repo 的脚本内容先检测是否存在 /etc/lsb-release 再查看二进制文件 lsb_release 所以识别到的系统是 Kylin\n\n查看原版 Debian 使用的的是 lsb_release 所以我们可以直接删除 /etc/lsb-release 这个文件 或者手动修改 /etc/lsb-release \nDISTRIB_ID&#x3D;Debian\nDISTRIB_RELEASE&#x3D;n&#x2F;a\nDISTRIB_CODENAME&#x3D;trixie\nDISTRIB_DESCRIPTION&#x3D;&quot;Debian GNU&#x2F;Linux trixie&#x2F;sid&quot;\n\n现在重新运行脚本\n\n成功！\n"},{"title":"设置Debian不自动启动新安装的服务","url":"/2024/09/29/%E8%AE%BE%E7%BD%AEDebian%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E6%96%B0%E5%AE%89%E8%A3%85%E7%9A%84%E6%9C%8D%E5%8A%A1/","content":"设置方法\nroot用户\n\necho exit 101 &gt; &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\nchmod +x &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\n\n\n其他有sudo权限的用户\n\necho exit 101 | sudo tee &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\nsudo chmod +x &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\n\n\n以安装vsftpd为例\n\nroot@myLaptop:~# echo exit 101 &gt; &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\nchmod +x &#x2F;usr&#x2F;sbin&#x2F;policy-rc.d\nroot@myLaptop:~# apt install vsftpd\n\n将要安装：\n  vsftpd\n\n摘要：\n  升级：0，安装：1，卸载：0，不升级：9\n  下载大小：142 kB\n  所需的空间：352 kB &#x2F; 131 GB 可用\n\n获取:1 https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;debian sid&#x2F;main amd64 vsftpd amd64 3.0.3-13.1 [142 kB]\n已下载 142 kB，耗时 0秒 (289 kB&#x2F;s)\n正在预设定软件包 ...\n正在选中未选择的软件包 vsftpd。\n(正在读取数据库 ... 系统当前共安装有 799342 个文件和目录。)\n准备解压 ...&#x2F;vsftpd_3.0.3-13.1_amd64.deb  ...\n正在解压 vsftpd (3.0.3-13.1) ...\n正在设置 vsftpd (3.0.3-13.1) ...\nCreated symlink &#39;&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;vsftpd.service&#39; → &#39;\n&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vsftpd.service&#39;.\n&#x2F;usr&#x2F;lib&#x2F;tmpfiles.d&#x2F;vsftpd.conf:1: Line references path below legacy directory &#x2F;\nvar&#x2F;run&#x2F;, updating &#x2F;var&#x2F;run&#x2F;vsftpd&#x2F;empty → &#x2F;run&#x2F;vsftpd&#x2F;empty; please update the \ntmpfiles.d&#x2F; drop-in file accordingly.\ninvoke-rc.d: policy-rc.d denied execution of start.\n正在处理用于 man-db (2.13.0-1) 的触发器 ...\nScanning processes...                                                           \nScanning candidates...                                                          \nScanning processor microcode...                                                 \nScanning linux images...                                                        \n\nRunning kernel seems to be up-to-date.\n\nThe processor microcode seems to be up-to-date.\n\nRestarting services...\nService restarts being deferred:\n systemctl restart sddm.service\n\nNo containers need to be restarted.\n\nUser sessions running outdated binaries:\n duzhuo @ session #3: cinnamon-launch[6978]\n\nNo VM guests are running outdated hypervisor (qemu) binaries on this host.\nroot@myLaptop:~# systemctl status vsftpd\n○ vsftpd.service - vsftpd FTP server\n     Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;vsftpd.service; enabled; preset: e&gt;\n     Active: inactive (dead)\n\n相关阅读~jpetazzo&#x2F;Use policy-rc.d to prevent services from starting automatically\ndebian-policy&#x2F;starting-system-services\n"}]